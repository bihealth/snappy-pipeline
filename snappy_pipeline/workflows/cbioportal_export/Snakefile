# -*- coding: utf-8 -*-
"""CUBI Pipeline cbioportal_export step Snakefile"""

import csv
import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.cbioportal_export import cbioportalExportWorkflow

__author__ = "Clemens Messerschmidt"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = cbioportalExportWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

exclude_flag = wf.w_config["step_config"]["cbioportal_export"]["exclude_variant_with_flag"]

# Rules =======================================================================


localrules:
    # Assembling meta files & concatenating results should be done locally
    # The sub steps requiring R for merging (CNA) *CANNOT* be done locally
    # Neither the expression sub-step (computation of RPKM)
    cbioportal_export_meta_files,
    cbioportal_export_patient_data,
    cbioportal_export_case_lists,
    cbioportal_export_concatenate_maf,


rule all:
    input:
        wf.get_result_files(),


# cbioportal study metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule cbioportal_export_meta_files:
    output:
        wf.get_output_files("cbioportal_meta_files", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/meta_files")


# cbioportal patient and sample data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule cbioportal_export_patient_data:
    output:
        **wf.get_output_files("cbioportal_clinical_data", "run"),
    params:
        **wf.get_args("cbioportal_clinical_data", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/clinical_data")


rule cbioportal_export_case_lists:
    output:
        **wf.get_output_files("cbioportal_case_lists", "run"),
    params:
        **wf.get_args("cbioportal_case_lists", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/case_lists")


# Mutation file (data_mutation_extended.txt) ==================================

# Create MAF ------------------------------------------------------------------


rule cbioportal_export_generate_mafs:
    input:
        **wf.get_input_files("cbioportal_vcf2maf", "run"),
    output:
        **wf.get_output_files("cbioportal_vcf2maf", "run"),
    threads: wf.get_resource("cbioportal_vcf2maf", "run", "threads")
    resources:
        time=wf.get_resource("cbioportal_vcf2maf", "run", "time"),
        memory=wf.get_resource("cbioportal_vcf2maf", "run", "memory"),
        partition=wf.get_resource("cbioportal_vcf2maf", "run", "partition"),
        tmpdir=wf.get_resource("cbioportal_vcf2maf", "run", "tmpdir"),
    params:
        args=wf.get_args("cbioportal_vcf2maf", "run"),
    log:
        **wf.get_log_file("cbioportal_vcf2maf", "run"),
    wrapper:
        wf.wrapper_path("vcf2maf/vcf_to_table")


# Merge all sample MAF files --------------------------------------------------


rule cbioportal_export_concatenate_maf:
    input:
        **wf.get_input_files("cbioportal_mutations", "run"),
    output:
        wf.get_output_files("cbioportal_mutations", "run"),
    shell:
        r"""
        cat \
        <( head -n 1 {input[0]} ) \
        <( tail -q -n +2 {input}) \
        | (if [[ -n "{exclude_flag}" ]] ; then grep -v {exclude_flag} ; else cat ; fi) \
        > {output}
        """


# Copy number files (data_cna_log2.txt, data_cna_gistic.txt, data_segment.txt)

# Create CNA files (discrete, continuous from cns files) ----------------------


rule cbioportal_export_generate_cna:
    input:
        **wf.get_input_files("cbioportal_cns2cna", "run"),
    output:
        **wf.get_output_files("cbioportal_cns2cna", "run"),
    threads: wf.get_resource("cbioportal_cns2cna", "run", "threads")
    resources:
        time=wf.get_resource("cbioportal_cns2cna", "run", "time"),
        memory=wf.get_resource("cbioportal_cns2cna", "run", "memory"),
        partition=wf.get_resource("cbioportal_cns2cna", "run", "partition"),
        tmpdir=wf.get_resource("cbioportal_cns2cna", "run", "tmpdir"),
    params:
        **wf.get_args("cbioportal_cns2cna", "run"),
    log:
        **wf.get_log_file("cbioportal_cns2cna", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/generate_cna")


# Merge sample-based CNA files to cBioPortal ----------------------------------


rule cbioportal_export_concatenate_cna_log2:
    input:
        **wf.get_input_files("cbioportal_cna", "log2"),
    output:
        wf.get_output_files("cbioportal_cna", "log2"),
    params:
        **wf.get_args("cbioportal_cna", "log2"),
    threads: wf.get_resource("cbioportal_cna", "log2", "threads")
    resources:
        time=wf.get_resource("cbioportal_cna", "log2", "time"),
        memory=wf.get_resource("cbioportal_cna", "log2", "memory"),
        partition=wf.get_resource("cbioportal_cna", "log2", "partition"),
        tmpdir=wf.get_resource("cbioportal_cna", "log2", "tmpdir"),
    log:
        **wf.get_log_file("cbioportal_cna", "log2"),
    wrapper:
        wf.wrapper_path("cbioportal/merge_tables")


rule cbioportal_export_concatenate_cna_gistic:
    input:
        **wf.get_input_files("cbioportal_cna", "gistic"),
    output:
        wf.get_output_files("cbioportal_cna", "gistic"),
    params:
        **wf.get_args("cbioportal_cna", "gistic"),
    threads: wf.get_resource("cbioportal_cna", "gistic", "threads")
    resources:
        time=wf.get_resource("cbioportal_cna", "gistic", "time"),
        memory=wf.get_resource("cbioportal_cna", "gistic", "memory"),
        partition=wf.get_resource("cbioportal_cna", "gistic", "partition"),
        tmpdir=wf.get_resource("cbioportal_cna", "gistic", "tmpdir"),
    log:
        **wf.get_log_file("cbioportal_cna", "gistic"),
    wrapper:
        wf.wrapper_path("cbioportal/merge_tables")


# Merge sample-based segment files to cBioPortal ------------------------------


rule cbioportal_export_concatenate_segments:
    input:
        **wf.get_input_files("cbioportal_segment", "run"),
    output:
        wf.get_output_files("cbioportal_segment", "run"),
    params:
        action_type="segment",
    threads: wf.get_resource("cbioportal_segment", "run", "threads")
    resources:
        time=wf.get_resource("cbioportal_segment", "run", "time"),
        memory=wf.get_resource("cbioportal_segment", "run", "memory"),
        partition=wf.get_resource("cbioportal_segment", "run", "partition"),
        tmpdir=wf.get_resource("cbioportal_segment", "run", "tmpdir"),
    log:
        **wf.get_log_file("cbioportal_segment", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/merge_tables")


# Create expression RPKMs -----------------------------------------------------


rule cbioportal_export_expression:
    input:
        **wf.get_input_files("cbioportal_expression", "run"),
    output:
        wf.get_output_files("cbioportal_expression", "run"),
    params:
        **wf.get_args("cbioportal_expression", "run"),
    threads: wf.get_resource("cbioportal_expression", "run", "threads")
    resources:
        time=wf.get_resource("cbioportal_expression", "run", "time"),
        memory=wf.get_resource("cbioportal_expression", "run", "memory"),
        partition=wf.get_resource("cbioportal_expression", "run", "partition"),
        tmpdir=wf.get_resource("cbioportal_expression", "run", "tmpdir"),
    log:
        **wf.get_log_file("cbioportal_expression", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/merge_tables")
