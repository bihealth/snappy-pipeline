# -*- coding: utf-8 -*-
"""CUBI Pipeline cbioportal_export step Snakefile"""

import os
import textwrap

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.cbioportal_export import cbioportalExportWorkflow

__author__ = "Clemens Messerschmidt"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = cbioportalExportWorkflow(
    workflow, config, cluster_config, lookup_paths, config_paths, os.getcwd()
)

exclude_flag = wf.w_config["step_config"]["cbioportal_export"]["exclude_variant_with_flag"]

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    cbioportal_export_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule cbioportal_export_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# cbioportal study metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule cbioportal_export_study_metadata:
    output:
        meta_file="work/upload/meta_study.txt",
    wrapper:
        wf.wrapper_path("cbioportal/study_meta")


rule cbioportal_export_meta_files:
    output:
        wf.get_output_files("cbioportal_meta_files", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/meta_files")


# cbioportal patient and sample metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule cbioportal_export_patient_metadata:
    output:
        **wf.get_output_files('cbioportal_clinical_data','run'),
    params:
        sheet=wf.substep_dispatch("cbioportal_clinical_data", "get_sample_sheets", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/clinical_data")


rule cbioportal_export_case_lists:
    output:
        **wf.get_output_files('cbioportal_case_lists','run'),
    params:
        sheet=wf.substep_dispatch("cbioportal_clinical_data", "get_sample_sheets", "run"),
    wrapper:
        wf.wrapper_path("cbioportal/case_lists")


# cbioportal data preparation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Create MAF ------------------------------------------------------------------


rule cbioportal_export_generate_mafs:
    input:
        **wf.get_input_files('cbioportal_vcf2maf','run'),
    output:
        **wf.get_output_files('cbioportal_vcf2maf','run'),
    params:
        args=wf.substep_dispatch("cbioportal_vcf2maf", "get_args", "run"),
    wrapper:
        wf.wrapper_path("vcf2maf/vcf2maf")


# Create one MAF from all MAFs


rule cbioportal_export_concatenate_maf:
    input:
        wf.get_input_files("cbioportal_maf", "run"),
    output:
        "work/upload/data_mutation_extended.txt",
    shell:
        r"""
        cat \
        <( head -n2 {input[0]} ) \
        <( tail -q -n +3 {input}) \
        | grep -v {exclude_flag} \
        > {output}
        """


# Create CNA gistic file ------------------------------------------------------
rule cbioportal_export_CNA_calls:
    input:
        wf.get_input_files("cbioportal_cna_data", "gistic"),
    output:
        "work/upload/data_CNA_gistic.txt",
    params:
        datatype="int",
    wrapper:
        wf.wrapper_path("cbioportal/merge_tables")


# Create CNA log2 file --------------------------------------------------------


rule cbioportal_export_CNA_log2:
    input:
        wf.get_input_files("cbioportal_cna_data", "log2"),
    output:
        "work/upload/data_CNA_log2.txt",
    params:
        datatype="float",
    wrapper:
        wf.wrapper_path("cbioportal/merge_tables")


# Create CNA segmentation file ------------------------------------------------


rule cbioportal_export_segments:
    input:
        wf.get_input_files("cbioportal_cna_data", "segments"),
    output:
        "work/upload/data_segment.txt",
    shell:
        r"""
        cat \
        <( head -n1 {input[0]} ) \
        <( tail -q -n +2 {input}) \
        | sed 's/-DNA.-W[EG]S.//' \
        > {output}
        """


# Create expression z-scores --------------------------------------------------


rule cbioportal_create_dataframe_matching_results:
    output:
        "work/zscores_mapping_df.tsv",
    run:
        wf.substep_dispatch("cbioportal_zscores", "get_df", output)


rule cbioportal_compute_zscores:
    input:
        tsv="work/zscores_mapping_df.tsv",
    output:
        tsv="work/upload/data_expression_zscores.txt",
    wrapper:
        wf.wrapper_path("cbioportal/zscores")
