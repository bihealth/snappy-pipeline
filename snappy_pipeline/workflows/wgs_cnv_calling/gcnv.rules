# gCNV with CASE MODE using precomputed model.


rule wgs_cnv_calling_gcnv_preprocess_intervals:
    input:
        unpack(wf.get_input_files("gcnv", "preprocess_intervals")),
    output:
        **wf.get_output_files("gcnv", "preprocess_intervals"),
    threads: wf.get_resource("gcnv", "preprocess_intervals", "threads")
    resources:
        time=wf.get_resource("gcnv", "preprocess_intervals", "time"),
        memory=wf.get_resource("gcnv", "preprocess_intervals", "memory"),
        partition=wf.get_resource("gcnv", "preprocess_intervals", "partition"),
    log:
        wf.get_log_file("gcnv", "preprocess_intervals"),
    wrapper:
        wf.wrapper_path("gcnv/preprocess_intervals_wgs")


rule wgs_cnv_calling_gcnv_coverage:
    input:
        unpack(wf.get_input_files("gcnv", "coverage")),
    output:
        **wf.get_output_files("gcnv", "coverage"),
    threads: wf.get_resource("gcnv", "coverage", "threads")
    resources:
        time=wf.get_resource("gcnv", "coverage", "time"),
        memory=wf.get_resource("gcnv", "coverage", "memory"),
        partition=wf.get_resource("gcnv", "coverage", "partition"),
    log:
        wf.get_log_file("gcnv", "coverage"),
    wrapper:
        wf.wrapper_path("gcnv/coverage")


rule wgs_cnv_calling_gcnv_contig_ploidy:
    input:
        unpack(wf.get_input_files("gcnv", "contig_ploidy")),
    output:
        **wf.get_output_files("gcnv", "contig_ploidy"),
    threads: wf.get_resource("gcnv", "contig_ploidy", "threads")
    resources:
        time=wf.get_resource("gcnv", "contig_ploidy", "time"),
        memory=wf.get_resource("gcnv", "contig_ploidy", "memory"),
        partition=wf.get_resource("gcnv", "contig_ploidy", "partition"),
    log:
        wf.get_log_file("gcnv", "contig_ploidy"),
    params:
        args=wf.get_params("gcnv", "contig_ploidy"),
    wrapper:
        wf.wrapper_path("gcnv/contig_ploidy_case_mode")


rule wgs_cnv_calling_gcnv_call_cnvs:
    input:
        unpack(wf.get_input_files("gcnv", "call_cnvs")),
    output:
        **wf.get_output_files("gcnv", "call_cnvs"),
    threads: wf.get_resource("gcnv", "call_cnvs", "threads")
    resources:
        time=wf.get_resource("gcnv", "call_cnvs", "time"),
        memory=wf.get_resource("gcnv", "call_cnvs", "memory"),
        partition=wf.get_resource("gcnv", "call_cnvs", "partition"),
    log:
        wf.get_log_file("gcnv", "call_cnvs"),
    params:
        args=wf.get_params("gcnv", "call_cnvs"),
    wrapper:
        wf.wrapper_path("gcnv/call_cnvs_case_mode")


rule wgs_cnv_calling_gcnv_post_germline_calls:
    input:
        unpack(wf.get_input_files("gcnv", "post_germline_calls")),
    output:
        **wf.get_output_files("gcnv", "post_germline_calls"),
    threads: wf.get_resource("gcnv", "post_germline_calls", "threads")
    resources:
        time=wf.get_resource("gcnv", "post_germline_calls", "time"),
        memory=wf.get_resource("gcnv", "post_germline_calls", "memory"),
        partition=wf.get_resource("gcnv", "post_germline_calls", "partition"),
    log:
        wf.get_log_file("gcnv", "post_germline_calls"),
    params:
        args=wf.get_params("gcnv", "post_germline_calls"),
    wrapper:
        wf.wrapper_path("gcnv/post_germline_calls_case_mode")


rule wgs_cnv_calling_gcnv_joint_germline_cnv_segmentation:
    input:
        unpack(wf.get_input_files("gcnv", "joint_germline_cnv_segmentation")),
    output:
        **wf.get_output_files("gcnv", "joint_germline_cnv_segmentation"),
    threads: wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "threads")
    resources:
        time=wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "time"),
        memory=wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "memory"),
        partition=wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "partition"),
    log:
        **wf.get_log_file("gcnv", "joint_germline_cnv_segmentation"),
    params:
        args=wf.get_params("gcnv", "post_germline_calls"),
    wrapper:
        wf.wrapper_path("gcnv/joint_germline_cnv_segmentation")
