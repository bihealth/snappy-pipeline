# -*- coding: utf-8 -*-
"""CUBI Pipeline variant_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.variant_calling import VariantCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = VariantCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Writing pedigrees should be done locally as well
    variant_calling_write_pedigree_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule variant_calling_write_pedigree_run:
    input:
        unpack(wf.get_input_files("write_pedigree", "run")),
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# Run bcftools ----------------------------------------------------------------


rule variant_calling_bcftools_run:
    input:
        unpack(wf.get_input_files("bcftools", "run")),
    output:
        **wf.get_output_files("bcftools", "run"),
    threads: wf.get_resource("bcftools", "run", "threads")
    resources:
        time=wf.get_resource("bcftools", "run", "time"),
        memory=wf.get_resource("bcftools", "run", "memory"),
        partition=wf.get_resource("bcftools", "run", "partition"),
    log:
        **wf.get_log_file("bcftools", "run"),
    wrapper:
        wf.wrapper_path("bcftools_call")


# Run GATK HaplotypeCaller (direct, pedigree/multi-sample) --------------------


rule variant_calling_gatk_hc_run:
    input:
        unpack(wf.get_input_files("gatk_hc", "run")),
    output:
        **wf.get_output_files("gatk_hc", "run"),
    threads: wf.get_resource("gatk_hc", "run", "threads")
    resources:
        time=wf.get_resource("gatk_hc", "run", "time"),
        memory=wf.get_resource("gatk_hc", "run", "memory"),
        partition=wf.get_resource("gatk_hc", "run", "partition"),
    params:
        step_key="variant_calling",
        caller_key="gatk_hc",
    log:
        **wf.get_log_file("gatk_hc", "run"),
    wrapper:
        wf.wrapper_path("gatk_hc_par")


# Run GATK 4 HaplotypeCaller Joint (direct, pedigree/multi-sample) ------------


rule variant_calling_gatk4_hc_joint_run:
    input:
        unpack(wf.get_input_files("gatk4_hc_joint", "run")),
    output:
        **wf.get_output_files("gatk4_hc_joint", "run"),
    threads: wf.get_resource("gatk4_hc_joint", "run", "threads")
    resources:
        time=wf.get_resource("gatk4_hc_joint", "run", "time"),
        memory=wf.get_resource("gatk4_hc_joint", "run", "memory"),
        partition=wf.get_resource("gatk4_hc_joint", "run", "partition"),
    log:
        **wf.get_log_file("gatk4_hc_joint", "run"),
    wrapper:
        wf.wrapper_path("gatk4_hc/joint")


# Run GATK 4 HaplotypeCaller gVCF (going via per-sample gVCF files) -----------


# Discover variants with GATK HaplotypeCaller, create per-sample gVCF file
rule variant_calling_gatk4_hc_gvcf_discover:
    input:
        unpack(wf.get_input_files("gatk4_hc_gvcf", "discover")),
    output:
        **wf.get_output_files("gatk4_hc_gvcf", "discover"),
    threads: wf.get_resource("gatk4_hc_gvcf", "discover", "threads")
    resources:
        time=wf.get_resource("gatk4_hc_gvcf", "discover", "time"),
        memory=wf.get_resource("gatk4_hc_gvcf", "discover", "memory"),
        partition=wf.get_resource("gatk4_hc_gvcf", "discover", "partition"),
    params:
        step_key="variant_calling",
        caller_key="gatk4_hc_gvcf",
    log:
        **wf.get_log_file("gatk4_hc_gvcf", "discover"),
    wrapper:
        wf.wrapper_path("gatk4_hc/discover")


# Combine the gVCF files from the pedigree with CombineGVCFs
rule variant_calling_gatk4_hc_gvcf_combine_gvcfs:
    input:
        unpack(wf.get_input_files("gatk4_hc_gvcf", "combine_gvcfs")),
    output:
        **wf.get_output_files("gatk4_hc_gvcf", "combine_gvcfs"),
    threads: wf.get_resource("gatk4_hc_gvcf", "combine_gvcfs", "threads")
    resources:
        time=wf.get_resource("gatk4_hc_gvcf", "combine_gvcfs", "time"),
        memory=wf.get_resource("gatk4_hc_gvcf", "combine_gvcfs", "memory"),
        partition=wf.get_resource("gatk4_hc_gvcf", "combine_gvcfs", "partition"),
    params:
        step_key="variant_calling",
        caller_key="gatk4_hc_gvcf",
    log:
        **wf.get_log_file("gatk4_hc_gvcf", "combine_gvcfs"),
    wrapper:
        wf.wrapper_path("gatk4_hc/combine_gvcfs")


# Perform GenotypeGVCFs genotyping of all samples in each pedigree
rule variant_calling_gatk4_hc_gvcf_genotype:
    input:
        unpack(wf.get_input_files("gatk4_hc_gvcf", "genotype")),
    output:
        **wf.get_output_files("gatk4_hc_gvcf", "genotype"),
    threads: wf.get_resource("gatk4_hc_gvcf", "genotype", "threads")
    resources:
        time=wf.get_resource("gatk4_hc_gvcf", "genotype", "time"),
        memory=wf.get_resource("gatk4_hc_gvcf", "genotype", "memory"),
        partition=wf.get_resource("gatk4_hc_gvcf", "genotype", "partition"),
    params:
        step_key="variant_calling",
        caller_key="gatk4_hc_gvcf",
    log:
        **wf.get_log_file("gatk4_hc_gvcf", "genotype"),
    wrapper:
        wf.wrapper_path("gatk4_hc/genotype")


# Run GATK UnifiedGenotyper ---------------------------------------------------


rule variant_calling_gatk_ug_run:
    input:
        unpack(wf.get_input_files("gatk_ug", "run")),
    output:
        **wf.get_output_files("gatk_ug", "run"),
    threads: wf.get_resource("gatk_ug", "run", "threads")
    resources:
        time=wf.get_resource("gatk_ug", "run", "time"),
        memory=wf.get_resource("gatk_ug", "run", "memory"),
        partition=wf.get_resource("gatk_ug", "run", "partition"),
    params:
        step_key="variant_calling",
        caller_key="gatk_ug",
    log:
        **wf.get_log_file("gatk_ug", "run"),
    wrapper:
        wf.wrapper_path("gatk_ug_par")


# QC / Statistics ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generate BCFtools stats report ----------------------------------------------


rule variant_calling_bcftools_stats_report:
    input:
        **wf.get_input_files("bcftools_stats", "run"),
    output:
        **wf.get_output_files("bcftools_stats", "run"),
    threads: wf.get_resource("bcftools_stats", "run", "threads")
    resources:
        time=wf.get_resource("bcftools_stats", "run", "time"),
        memory=wf.get_resource("bcftools_stats", "run", "memory"),
        partition=wf.get_resource("bcftools_stats", "run", "partition"),
    log:
        **wf.get_log_file("bcftools_stats", "run"),
    wrapper:
        wf.wrapper_path("bcftools_stats/run")


# Generate Jannovar statistics report -----------------------------------------


rule variant_calling_jannovar_stats_report:
    input:
        **wf.get_input_files("jannovar_stats", "run"),
    output:
        **wf.get_output_files("jannovar_stats", "run"),
    threads: wf.get_resource("jannovar_stats", "run", "threads")
    resources:
        time=wf.get_resource("jannovar_stats", "run", "time"),
        memory=wf.get_resource("jannovar_stats", "run", "memory"),
        partition=wf.get_resource("jannovar_stats", "run", "partition"),
    log:
        **wf.get_log_file("jannovar_stats", "run"),
    wrapper:
        wf.wrapper_path("jannovar/statistics")


# Generate B allele fraction files --------------------------------------------


rule variant_calling_baf_file_generation:
    input:
        **wf.get_input_files("baf_file_generation", "run"),
    output:
        **wf.get_output_files("baf_file_generation", "run"),
    threads: wf.get_resource("baf_file_generation", "run", "threads")
    resources:
        time=wf.get_resource("baf_file_generation", "run", "time"),
        memory=wf.get_resource("baf_file_generation", "run", "memory"),
        partition=wf.get_resource("baf_file_generation", "run", "partition"),
    log:
        **wf.get_log_file("baf_file_generation", "run"),
    wrapper:
        wf.wrapper_path("baf_file_generation")
