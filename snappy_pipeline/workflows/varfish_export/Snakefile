import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.varfish_export import VarfishExportWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = VarfishExportWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    varfish_export_write_pedigree_run,


rule all:
    input:
        wf.get_result_files(),


# Export for VarFish ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule varfish_export_write_pedigree_run:
    input:
        unpack(wf.get_input_files("write_pedigree", "run")),
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# Run varfish-annotator-cli annotate ------------------------------------------


rule varfish_export_varfish_annotator_annotate:
    input:
        unpack(wf.get_input_files("varfish_annotator", "annotate")),
    output:
        **wf.get_output_files("varfish_annotator", "annotate"),
    threads: wf.get_resource("varfish_annotator", "annotate", "threads")
    resources:
        time=wf.get_resource("varfish_annotator", "annotate", "time"),
        memory=wf.get_resource("varfish_annotator", "annotate", "memory"),
        partition=wf.get_resource("varfish_annotator", "annotate", "partition"),
    log:
        **wf.get_log_file("varfish_annotator", "annotate"),
    params:
        **{"args": wf.get_params("varfish_annotator", "annotate")},
    wrapper:
        wf.wrapper_path("varfish_annotator/annotate")


# Run varfish-annotator-cli annotate-svs ---------------------------------------


rule varfish_export_varfish_annotator_annotate_svs:
    input:
        unpack(wf.get_input_files("varfish_annotator", "annotate_svs")),
    output:
        **wf.get_output_files("varfish_annotator", "annotate_svs"),
    threads: wf.get_resource("varfish_annotator", "annotate_svs", "threads")
    resources:
        time=wf.get_resource("varfish_annotator", "annotate_svs", "time"),
        memory=wf.get_resource("varfish_annotator", "annotate_svs", "memory"),
        partition=wf.get_resource("varfish_annotator", "annotate_svs", "partition"),
    log:
        **wf.get_log_file("varfish_annotator", "annotate_svs"),
    # params:
    #     **{"args": wf.get_params("varfish_annotator", "annotate_svs")},
    wrapper:
        wf.wrapper_path("varfish_annotator/annotate_svs")


# Gather statistics about the alignment ---------------------------------------


rule varfish_export_varfish_annotator_bam_qc:
    input:
        unpack(wf.get_input_files("varfish_annotator", "bam_qc")),
    output:
        **wf.get_output_files("varfish_annotator", "bam_qc"),
    threads: wf.get_resource("varfish_annotator", "bam_qc", "threads")
    resources:
        time=wf.get_resource("varfish_annotator", "bam_qc", "time"),
        memory=wf.get_resource("varfish_annotator", "bam_qc", "memory"),
        partition=wf.get_resource("varfish_annotator", "bam_qc", "partition"),
    log:
        **wf.get_log_file("varfish_annotator", "bam_qc"),
    params:
        **{"args": wf.get_params("varfish_annotator", "bam_qc")},
    wrapper:
        wf.wrapper_path("varfish_annotator/bam_qc")
