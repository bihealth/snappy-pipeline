import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.varfish_export import VarfishExportWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = VarfishExportWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())


# Modules =====================================================================


module variant_calling:
    snakefile:
        "../variant_calling/Snakefile"
    config:
        wf.w_config
    prefix:
        wf.config.get("path_variant_calling", "../variant_calling")


use rule * from variant_calling


if wf.config["path_sv_calling_targeted"]:

    module sv_calling_targeted:
        snakefile:
            "../sv_calling_targeted/Snakefile"
        config:
            wf.w_config
        prefix:
            wf.config.get("path_sv_calling_targeted", "../sv_calling_targeted")

    use rule * from sv_calling_targeted


if wf.config["path_sv_calling_wgs"]:

    module sv_calling_wgs:
        snakefile:
            "../sv_calling_wgs/Snakefile"
        config:
            wf.w_config
        prefix:
            wf.config.get("path_sv_calling_wgs", "../sv_calling_wgs")

    use rule * from sv_calling_wgs


module ngs_mapping:
    snakefile:
        "../ngs_mapping/Snakefile"
    config:
        wf.w_config
    prefix:
        wf.config.get("path_ngs_mapping", "../ngs_mapping")


use rule * from ngs_mapping


# Rules =======================================================================


localrules:
    varfish_export_write_pedigree_run,


rule varfish_export_all:
    input:
        wf.get_result_files(),
    default_target: True


# Export for VarFish ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule varfish_export_write_pedigree_run:
    input:
        unpack(wf.get_input_files("write_pedigree", "run")),
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# Run varfish-annotator-cli annotate-seqvars -----------------------------------


rule varfish_export_mehari_annotate_seqvars:
    input:
        unpack(wf.get_input_files("mehari", "annotate_seqvars")),
    output:
        **wf.get_output_files("mehari", "annotate_seqvars"),
    threads: wf.get_resource("mehari", "annotate_seqvars", "threads")
    resources:
        time=wf.get_resource("mehari", "annotate_seqvars", "time"),
        memory=wf.get_resource("mehari", "annotate_seqvars", "memory"),
        partition=wf.get_resource("mehari", "annotate_seqvars", "partition"),
        tmpdir=wf.get_resource("mehari", "annotate_seqvars", "tmpdir"),
    log:
        **wf.get_log_file("mehari", "annotate_seqvars"),
    params:
        **{"args": wf.get_params("mehari", "annotate_seqvars")},
    wrapper:
        wf.wrapper_path("mehari/annotate_seqvars")


# Run varfish-annotator-cli annotate-strucvars ---------------------------------


rule varfish_export_mehari_annotate_strucvars:
    input:
        unpack(wf.get_input_files("mehari", "annotate_strucvars")),
    output:
        **wf.get_output_files("mehari", "annotate_strucvars"),
    threads: wf.get_resource("mehari", "annotate_strucvars", "threads")
    resources:
        time=wf.get_resource("mehari", "annotate_strucvars", "time"),
        memory=wf.get_resource("mehari", "annotate_strucvars", "memory"),
        partition=wf.get_resource("mehari", "annotate_strucvars", "partition"),
        tmpdir=wf.get_resource("mehari", "annotate_strucvars", "tmpdir"),
    log:
        **wf.get_log_file("mehari", "annotate_strucvars"),
    params:
        **{"args": wf.get_params("mehari", "annotate_strucvars")},
    wrapper:
        wf.wrapper_path("mehari/annotate_strucvars")


# Gather statistics about the alignment ---------------------------------------


rule varfish_export_mehari_bam_qc:
    input:
        unpack(wf.get_input_files("mehari", "bam_qc")),
    output:
        **wf.get_output_files("mehari", "bam_qc"),
    threads: wf.get_resource("mehari", "bam_qc", "threads")
    resources:
        time=wf.get_resource("mehari", "bam_qc", "time"),
        memory=wf.get_resource("mehari", "bam_qc", "memory"),
        partition=wf.get_resource("mehari", "bam_qc", "partition"),
        tmpdir=wf.get_resource("mehari", "bam_qc", "tmpdir"),
    log:
        **wf.get_log_file("mehari", "bam_qc"),
    params:
        **{"args": wf.get_params("mehari", "bam_qc")},
    wrapper:
        wf.wrapper_path("mehari/bam_qc")
