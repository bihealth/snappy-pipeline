# -*- coding: utf-8 -*-
"""CUBI Pipeline variant_Export step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.variant_export import VariantExportWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = VariantExportWorkflow(
    workflow, config, lookup_paths, config_paths, os.getcwd()
)

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    variant_export_link_out_run,
    # Writing pedigrees should be done locally as well
    variant_export_write_pedigree_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule variant_export_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Variant Annotation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule variant_export_write_pedigree_run:
    input:
        unpack(wf.get_input_files("write_pedigree", "run")),
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# Run varfish-annotator-cli annotate ------------------------------------------


rule variant_export_varfish_annotator_annotate:
    input:
        unpack(wf.get_input_files("varfish_annotator", "annotate")),
    output:
        **wf. get_output_files('varfish_annotator','annotate'),
    threads: wf.get_resources("varfish_annotator", "annotate", "threads")
    resources:
        time=wf.get_resource("varfish_annotator", "annotate", "time"),
        mem=wf.get_resource("varfish_annotator", "annotate", "memory"),
        partition=wf.get_resources("varfish_annotator", "annotate", "partition"),
    log:
        **wf. get_log_file('varfish_annotator','annotate'),
    params:
        **{"args": wf. get_params('varfish_annotator','annotate')},
    wrapper:
        wf.wrapper_path("varfish_annotator/annotate")


# Gather statistics about the alignment ---------------------------------------


rule variant_export_varfish_annotator_bam_qc:
    input:
        unpack(wf.get_input_files("varfish_annotator", "bam_qc")),
    output:
        **wf. get_output_files('varfish_annotator','bam_qc'),
    threads: wf.get_resources("varfish_annotator", "bam_qc", "threads")
    resources:
        time=wf.get_resource("varfish_annotator", "bam_qc", "time"),
        mem=wf.get_resource("varfish_annotator", "bam_qc", "memory"),
        partition=wf.get_resources("varfish_annotator", "bam_qc", "partition"),
    log:
        **wf. get_log_file('varfish_annotator','bam_qc'),
    wrapper:
        wf.wrapper_path("varfish_annotator/bam_qc")
