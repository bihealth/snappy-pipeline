# -*- coding: utf-8 -*-
"""CUBI Pipeline sv_calling_wgs step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.sv_calling_wgs import WgsSvCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = WgsSvCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    sv_calling_wgs_write_pedigree,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule sv_calling_targeted_write_pedigree_run:
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# Structural Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run Manta -------------------------------------------------------------------


rule sv_calling_wgs_manta_run:
    input:
        wf.get_input_files("manta", "run"),
    output:
        **wf.get_output_files("manta", "run"),
    threads: wf.get_resource("manta", "run", "threads")
    resources:
        time=wf.get_resource("manta", "run", "time"),
        memory=wf.get_resource("manta", "run", "memory"),
        partition=wf.get_resource("manta", "run", "partition"),
        tmpdir=wf.get_resource("manta", "run", "tmpdir"),
    log:
        wf.get_log_file("manta", "run"),
    wrapper:
        wf.wrapper_path("manta/germline_wgs")


# Delly2 Steps ----------------------------------------------------------------


rule sv_calling_wgs_delly2_call:
    input:
        unpack(wf.get_input_files("delly2", "call")),
    output:
        **wf.get_output_files("delly2", "call"),
    threads: wf.get_resource("delly2", "call", "threads")
    resources:
        time=wf.get_resource("delly2", "call", "time"),
        memory=wf.get_resource("delly2", "call", "memory"),
        partition=wf.get_resource("delly2", "call", "partition"),
        tmpdir=wf.get_resource("delly2", "call", "tmpdir"),
    params:
        step_key="sv_calling_wgs",
        library_info=wf.substep_getattr("delly2", "get_library_extra_infos"),
    log:
        wf.get_log_file("delly2", "call"),
    wrapper:
        wf.wrapper_path("delly2/germline/call")


rule sv_calling_wgs_delly2_merge_calls:
    input:
        wf.get_input_files("delly2", "merge_calls"),
    output:
        **wf.get_output_files("delly2", "merge_calls"),
    threads: wf.get_resource("delly2", "merge_calls", "threads")
    resources:
        time=wf.get_resource("delly2", "merge_calls", "time"),
        memory=wf.get_resource("delly2", "merge_calls", "memory"),
        partition=wf.get_resource("delly2", "merge_calls", "partition"),
        tmpdir=wf.get_resource("delly2", "merge_calls", "tmpdir"),
    params:
        step_key="sv_calling_wgs",
    log:
        wf.get_log_file("delly2", "merge_calls"),
    wrapper:
        wf.wrapper_path("delly2/germline/merge_calls")


rule sv_calling_wgs_delly2_genotype:
    input:
        unpack(wf.get_input_files("delly2", "genotype")),
    output:
        **wf.get_output_files("delly2", "genotype"),
    threads: wf.get_resource("delly2", "genotype", "threads")
    resources:
        time=wf.get_resource("delly2", "genotype", "time"),
        memory=wf.get_resource("delly2", "genotype", "memory"),
        partition=wf.get_resource("delly2", "genotype", "partition"),
        tmpdir=wf.get_resource("delly2", "genotype", "tmpdir"),
    params:
        step_key="sv_calling_wgs",
        library_info=wf.substep_getattr("delly2", "get_library_extra_infos"),
    log:
        wf.get_log_file("delly2", "genotype"),
    wrapper:
        wf.wrapper_path("delly2/germline/genotype")


rule sv_calling_wgs_delly2_merge_genotypes:
    input:
        wf.get_input_files("delly2", "merge_genotypes"),
    output:
        **wf.get_output_files("delly2", "merge_genotypes"),
    threads: wf.get_resource("delly2", "merge_genotypes", "threads")
    resources:
        time=wf.get_resource("delly2", "merge_genotypes", "time"),
        memory=wf.get_resource("delly2", "merge_genotypes", "memory"),
        partition=wf.get_resource("delly2", "merge_genotypes", "partition"),
        tmpdir=wf.get_resource("delly2", "merge_genotypes", "tmpdir"),
    params:
        step_key="sv_calling_wgs",
    log:
        wf.get_log_file("delly2", "merge_genotypes"),
    wrapper:
        wf.wrapper_path("delly2/germline/merge_genotypes")


# Run PB Honey Spots ----------------------------------------------------------


rule sv_calling_wgs_pb_honey_spots_run:
    input:
        wf.get_input_files("pb_honey_spots", "run"),
    output:
        **wf.get_output_files("pb_honey_spots", "run"),
    threads: wf.get_resource("pb_honey_spots", "run", "threads")
    resources:
        time=wf.get_resource("pb_honey_spots", "run", "time"),
        memory=wf.get_resource("pb_honey_spots", "run", "memory"),
        partition=wf.get_resource("pb_honey_spots", "run", "partition"),
        tmpdir=wf.get_resource("pb_honey_spots", "run", "tmpdir"),
    log:
        wf.get_log_file("pb_honey_spots", "run"),
    wrapper:
        wf.wrapper_path("pb_honey_spots/germline")


# Run Sniffles ----------------------------------------------------------------


rule sv_calling_wgs_sniffles_run:
    input:
        wf.get_input_files("sniffles", "run"),
    output:
        **wf.get_output_files("sniffles", "run"),
    threads: wf.get_resource("sniffles", "run", "threads")
    resources:
        time=wf.get_resource("sniffles", "run", "time"),
        memory=wf.get_resource("sniffles", "run", "memory"),
        partition=wf.get_resource("sniffles", "run", "partition"),
        tmpdir=wf.get_resource("sniffles", "run", "tmpdir"),
    log:
        wf.get_log_file("sniffles", "run"),
    wrapper:
        wf.wrapper_path("sniffles/germline")


# Run Sniffles 2 --------------------------------------------------------------


rule sv_calling_wgs_sniffles2_bam_to_snf:
    input:
        unpack(wf.get_input_files("sniffles2", "bam_to_snf")),
    output:
        **wf.get_output_files("sniffles2", "bam_to_snf"),
    threads: wf.get_resource("sniffles2", "bam_to_snf", "threads")
    resources:
        time=wf.get_resource("sniffles2", "bam_to_snf", "time"),
        memory=wf.get_resource("sniffles2", "bam_to_snf", "memory"),
        partition=wf.get_resource("sniffles2", "bam_to_snf", "partition"),
        tmpdir=wf.get_resource("sniffles2", "bam_to_snf", "tmpdir"),
    log:
        wf.get_log_file("sniffles2", "bam_to_snf"),
    wrapper:
        wf.wrapper_path("sniffles2/germline/bam_to_snf")


rule sv_calling_wgs_sniffles2_snf_to_vcf:
    input:
        unpack(wf.get_input_files("sniffles2", "snf_to_vcf")),
    output:
        **wf.get_output_files("sniffles2", "snf_to_vcf"),
    threads: wf.get_resource("sniffles2", "snf_to_vcf", "threads")
    resources:
        time=wf.get_resource("sniffles2", "snf_to_vcf", "time"),
        memory=wf.get_resource("sniffles2", "snf_to_vcf", "memory"),
        partition=wf.get_resource("sniffles2", "snf_to_vcf", "partition"),
        tmpdir=wf.get_resource("sniffles2", "snf_to_vcf", "tmpdir"),
    log:
        wf.get_log_file("sniffles2", "snf_to_vcf"),
    wrapper:
        wf.wrapper_path("sniffles2/germline/snf_to_vcf")


# PopDel Steps ----------------------------------------------------------------


ruleorder: sv_calling_wgs_popdel_reorder_vcf > sv_calling_wgs_popdel_concat_calls > sv_calling_wgs_popdel_call > sv_calling_wgs_popdel_profile


rule sv_calling_wgs_popdel_profile:
    input:
        unpack(wf.get_input_files("popdel", "profile")),
    output:
        **wf.get_output_files("popdel", "profile"),
    threads: wf.get_resource("popdel", "profile", "threads")
    resources:
        time=wf.get_resource("popdel", "profile", "time"),
        memory=wf.get_resource("popdel", "profile", "memory"),
        partition=wf.get_resource("popdel", "profile", "partition"),
        tmpdir=wf.get_resource("popdel", "profile", "tmpdir"),
    wildcard_constraints:
        index_ngs_library=r"[^\.]+",
    log:
        **wf.get_log_file("popdel", "profile"),
    wrapper:
        wf.wrapper_path("popdel/profile")


rule sv_calling_wgs_popdel_call:
    input:
        unpack(wf.get_input_files("popdel", "call")),
    output:
        **wf.get_output_files("popdel", "call"),
    threads: wf.get_resource("popdel", "call", "threads")
    resources:
        time=wf.get_resource("popdel", "call", "time"),
        memory=wf.get_resource("popdel", "call", "memory"),
        partition=wf.get_resource("popdel", "call", "partition"),
        tmpdir=wf.get_resource("popdel", "call", "tmpdir"),
    log:
        **wf.get_log_file("popdel", "call"),
    wrapper:
        wf.wrapper_path("popdel/call")


rule sv_calling_wgs_popdel_concat_calls:
    input:
        unpack(wf.get_input_files("popdel", "concat_calls")),
    output:
        **wf.get_output_files("popdel", "concat_calls"),
    threads: wf.get_resource("popdel", "concat_calls", "threads")
    resources:
        time=wf.get_resource("popdel", "concat_calls", "time"),
        memory=wf.get_resource("popdel", "concat_calls", "memory"),
        partition=wf.get_resource("popdel", "concat_calls", "partition"),
        tmpdir=wf.get_resource("popdel", "concat_calls", "tmpdir"),
    log:
        **wf.get_log_file("popdel", "concat_calls"),
    wrapper:
        wf.wrapper_path("popdel/concat_calls")


rule sv_calling_wgs_popdel_reorder_vcf:
    input:
        unpack(wf.get_input_files("popdel", "reorder_vcf")),
    output:
        **wf.get_output_files("popdel", "reorder_vcf"),
    threads: wf.get_resource("popdel", "reorder_vcf", "threads")
    resources:
        time=wf.get_resource("popdel", "reorder_vcf", "time"),
        memory=wf.get_resource("popdel", "reorder_vcf", "memory"),
        partition=wf.get_resource("popdel", "reorder_vcf", "partition"),
        tmpdir=wf.get_resource("popdel", "reorder_vcf", "tmpdir"),
    wildcard_constraints:
        index_ngs_library=r"[^\.]+",
    params:
        ped_members=wf.substep_getattr("popdel", "get_ped_members"),
    log:
        **wf.get_log_file("popdel", "reorder_vcf"),
    wrapper:
        wf.wrapper_path("popdel/reorder_vcf")
