# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_variant_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.panel_of_normals import PanelOfNormalsWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = PanelOfNormalsWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    panel_of_normals_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule panel_of_normals_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Panel of normals (Mutect2) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Select normals --------------------------------------------------------------

# rule panel_of_normals_mutect2_select_panel:
#     input: unpack(wf.get_input_files('mutect2', 'select_panel'))
#     output: **wf.get_output_files('mutect2', 'select_panel')
#     # log: **wf.get_log_file('mutect2', 'select_panel')
#     wrapper: wf.wrapper_path('mutect2/select_panel')

# Write out the tumor-only results for the normals ----------------------------


rule panel_of_normals_mutect2_prepare_panel:
    input:
        unpack(wf.get_input_files("mutect2", "prepare_panel")),
    output:
        **wf.get_output_files("mutect2", "prepare_panel"),
    threads: wf.get_resource("mutect2", "prepare_panel", "threads")
    resources:
        time=wf.get_resource("mutect2", "prepare_panel", "time"),
        memory=wf.get_resource("mutect2", "prepare_panel", "memory"),
        partition=wf.get_resource("mutect2", "prepare_panel", "partition"),
        tmpdir=wf.get_resource("mutect2", "prepare_panel", "tmpdir"),
    log:
        **wf.get_log_file("mutect2", "prepare_panel"),
    wrapper:
        wf.wrapper_path("mutect2_par/prepare_panel")


# Create the panel of normals -------------------------------------------------


rule panel_of_normals_mutect2_create_panel:
    input:
        unpack(wf.get_input_files("mutect2", "create_panel")),
    output:
        **wf.get_output_files("mutect2", "create_panel"),
    threads: wf.get_resource("mutect2", "create_panel", "threads")
    resources:
        time=wf.get_resource("mutect2", "create_panel", "time"),
        memory=wf.get_resource("mutect2", "create_panel", "memory"),
        partition=wf.get_resource("mutect2", "create_panel", "partition"),
        tmpdir=wf.get_resource("mutect2", "create_panel", "tmpdir"),
    log:
        **wf.get_log_file("mutect2", "create_panel"),
    wrapper:
        wf.wrapper_path("mutect2/create_panel")


# Panel of normals (cnvkit) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out the normals-only results for the normals --------------------------


rule panel_of_normals_cnvkit_ignore:
    input:
        unpack(wf.get_input_files("cnvkit", "ignore")),
    output:
        **wf.get_output_files("cnvkit", "ignore"),
    threads: wf.get_resource("cnvkit", "ignore", "threads")
    resources:
        time=wf.get_resource("cnvkit", "ignore", "time"),
        memory=wf.get_resource("cnvkit", "ignore", "memory"),
        partition=wf.get_resource("cnvkit", "ignore", "partition"),
    log:
        **wf.get_log_file("cnvkit", "ignore"),
    params:
        **{"args": wf.get_args("cnvkit", "ignore")},
    wrapper:
        wf.wrapper_path("cnvkit/ignore")


rule panel_of_normals_cnvkit_access:
    input:
        unpack(wf.get_input_files("cnvkit", "access")),
    output:
        **wf.get_output_files("cnvkit", "access"),
    threads: wf.get_resource("cnvkit", "access", "threads")
    resources:
        time=wf.get_resource("cnvkit", "access", "time"),
        memory=wf.get_resource("cnvkit", "access", "memory"),
        partition=wf.get_resource("cnvkit", "access", "partition"),
    log:
        **wf.get_log_file("cnvkit", "access"),
    params:
        **{"args": wf.get_args("cnvkit", "access")},
    wrapper:
        wf.wrapper_path("cnvkit/access")


rule panel_of_normals_cnvkit_autobin:
    input:
        unpack(wf.get_input_files("cnvkit", "autobin")),
    output:
        **wf.get_output_files("cnvkit", "autobin"),
    threads: wf.get_resource("cnvkit", "autobin", "threads")
    resources:
        time=wf.get_resource("cnvkit", "autobin", "time"),
        memory=wf.get_resource("cnvkit", "autobin", "memory"),
        partition=wf.get_resource("cnvkit", "autobin", "partition"),
    log:
        **wf.get_log_file("cnvkit", "autobin"),
    params:
        **{"args": wf.get_args("cnvkit", "autobin")},
    wrapper:
        wf.wrapper_path("cnvkit/autobin")


rule panel_of_normals_cnvkit_target:
    input:
        unpack(wf.get_input_files("cnvkit", "target")),
    output:
        **wf.get_output_files("cnvkit", "target"),
    threads: wf.get_resource("cnvkit", "target", "threads")
    resources:
        time=wf.get_resource("cnvkit", "target", "time"),
        memory=wf.get_resource("cnvkit", "target", "memory"),
        partition=wf.get_resource("cnvkit", "target", "partition"),
    log:
        **wf.get_log_file("cnvkit", "target"),
    params:
        **{"args": wf.get_args("cnvkit", "target")},
    wrapper:
        wf.wrapper_path("cnvkit/target")


rule panel_of_normals_cnvkit_antitarget:
    input:
        unpack(wf.get_input_files("cnvkit", "antitarget")),
    output:
        **wf.get_output_files("cnvkit", "antitarget"),
    threads: wf.get_resource("cnvkit", "antitarget", "threads")
    resources:
        time=wf.get_resource("cnvkit", "antitarget", "time"),
        memory=wf.get_resource("cnvkit", "antitarget", "memory"),
        partition=wf.get_resource("cnvkit", "antitarget", "partition"),
    log:
        **wf.get_log_file("cnvkit", "antitarget"),
    params:
        **{"args": wf.get_args("cnvkit", "antitarget")},
    wrapper:
        wf.wrapper_path("cnvkit/antitarget")


rule panel_of_normals_cnvkit_coverage:
    input:
        unpack(wf.get_input_files("cnvkit", "coverage")),
    output:
        **wf.get_output_files("cnvkit", "coverage"),
    threads: wf.get_resource("cnvkit", "coverage", "threads")
    resources:
        time=wf.get_resource("cnvkit", "coverage", "time"),
        memory=wf.get_resource("cnvkit", "coverage", "memory"),
        partition=wf.get_resource("cnvkit", "coverage", "partition"),
    log:
        **wf.get_log_file("cnvkit", "coverage"),
    params:
        **{"args": wf.get_args("cnvkit", "coverage")},
    wrapper:
        wf.wrapper_path("cnvkit/coverage")


# Create the panel of normals -------------------------------------------------


rule panel_of_normals_cnvkit_create_panel:
    input:
        unpack(wf.get_input_files("cnvkit", "create_panel")),
    output:
        **wf.get_output_files("cnvkit", "create_panel"),
    threads: wf.get_resource("cnvkit", "create_panel", "threads")
    resources:
        time=wf.get_resource("cnvkit", "create_panel", "time"),
        memory=wf.get_resource("cnvkit", "create_panel", "memory"),
        partition=wf.get_resource("cnvkit", "create_panel", "partition"),
    log:
        **wf.get_log_file("cnvkit", "create_panel"),
    params:
        **{"args": wf.get_args("cnvkit", "create_panel")},
    wrapper:
        wf.wrapper_path("cnvkit/reference")


rule panel_of_normals_cnvkit_sex:
    input:
        unpack(wf.get_input_files("cnvkit", "sex")),
    output:
        **wf.get_output_files("cnvkit", "sex"),
    threads: wf.get_resource("cnvkit", "sex", "threads")
    resources:
        time=wf.get_resource("cnvkit", "sex", "time"),
        memory=wf.get_resource("cnvkit", "sex", "memory"),
        partition=wf.get_resource("cnvkit", "sex", "partition"),
    log:
        **wf.get_log_file("cnvkit", "sex"),
    params:
        **{"args": wf.get_args("cnvkit", "sex")},
    wrapper:
        wf.wrapper_path("cnvkit/sex")


rule panel_of_normals_cnvkit_metrics:
    input:
        unpack(wf.get_input_files("cnvkit", "metrics")),
    output:
        **wf.get_output_files("cnvkit", "metrics"),
    threads: wf.get_resource("cnvkit", "metrics", "threads")
    resources:
        time=wf.get_resource("cnvkit", "metrics", "time"),
        memory=wf.get_resource("cnvkit", "metrics", "memory"),
        partition=wf.get_resource("cnvkit", "metrics", "partition"),
    log:
        **wf.get_log_file("cnvkit", "metrics"),
    params:
        **{"args": wf.get_args("cnvkit", "metrics")},
    wrapper:
        wf.wrapper_path("cnvkit/report/metrics")


# Panel of normals (PureCN) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# Install the annotation R package --------------------------


rule panel_of_normals_purecn_install:
    output:
        **wf.get_output_files("purecn", "install"),
    params:
        container="docker://markusriester/purecn",
    resources:
        time=wf.get_resource("purecn", "install", "time"),
        memory=wf.get_resource("purecn", "install", "memory"),
        partition=wf.get_resource("purecn", "install", "partition"),
    log:
        **wf.get_log_file("purecn", "install"),
    wrapper:
        wf.wrapper_path("singularity")


rule panel_of_normals_purecn_prepare:
    input:
        **wf.get_input_files("purecn", "prepare"),
    output:
        **wf.get_output_files("purecn", "prepare"),
    resources:
        time=wf.get_resource("purecn", "prepare", "time"),
        memory=wf.get_resource("purecn", "prepare", "memory"),
        partition=wf.get_resource("purecn", "prepare", "partition"),
    log:
        **wf.get_log_file("purecn", "prepare"),
    wrapper:
        wf.wrapper_path("purecn/prepare")


rule panel_of_normals_purecn_coverage:
    input:
        unpack(wf.get_input_files("purecn", "coverage")),
    output:
        **wf.get_output_files("purecn", "coverage"),
    resources:
        time=wf.get_resource("purecn", "coverage", "time"),
        memory=wf.get_resource("purecn", "coverage", "memory"),
        partition=wf.get_resource("purecn", "coverage", "partition"),
    log:
        **wf.get_log_file("purecn", "coverage"),
    wrapper:
        wf.wrapper_path("purecn/coverage")


rule panel_of_normals_purecn_create_panel:
    input:
        unpack(wf.get_input_files("purecn", "create_panel")),
    output:
        **wf.get_output_files("purecn", "create_panel"),
    resources:
        time=wf.get_resource("purecn", "create_panel", "time"),
        memory=wf.get_resource("purecn", "create_panel", "memory"),
        partition=wf.get_resource("purecn", "create_panel", "partition"),
    log:
        **wf.get_log_file("purecn", "create_panel"),
    wrapper:
        wf.wrapper_path("purecn/create_panel")
