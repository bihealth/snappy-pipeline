# -*- coding: utf-8 -*-
"""CUBI Pipeline helper_gcnv_model_targeted step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.helper_gcnv_model_targeted import (
    HelperBuildTargetSeqGcnvModelWorkflow,
)


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = HelperBuildTargetSeqGcnvModelWorkflow(
    workflow, config, lookup_paths, config_paths, os.getcwd()
)

# Rules =======================================================================


rule all:
    input:
        wf.get_result_files(),


rule build_gcnv_model_preprocess_intervals:
    input:
        unpack(wf.get_input_files("gcnv", "preprocess_intervals")),
    output:
        **wf.get_output_files("gcnv", "preprocess_intervals"),
    threads: wf.get_resource("gcnv", "preprocess_intervals", "threads")
    resources:
        time=wf.get_resource("gcnv", "preprocess_intervals", "time"),
        memory=wf.get_resource("gcnv", "preprocess_intervals", "memory"),
        partition=wf.get_resource("gcnv", "preprocess_intervals", "partition"),
    log:
        wf.get_log_file("gcnv", "preprocess_intervals"),
    wrapper:
        wf.wrapper_path("gcnv/preprocess_intervals")


rule build_gcnv_model_annotate_gc:
    input:
        unpack(wf.get_input_files("gcnv", "annotate_gc")),
    output:
        **wf.get_output_files("gcnv", "annotate_gc"),
    threads: wf.get_resource("gcnv", "annotate_gc", "threads")
    resources:
        time=wf.get_resource("gcnv", "annotate_gc", "time"),
        memory=wf.get_resource("gcnv", "annotate_gc", "memory"),
        partition=wf.get_resource("gcnv", "annotate_gc", "partition"),
    log:
        wf.get_log_file("gcnv", "annotate_gc"),
    wrapper:
        wf.wrapper_path("gcnv/annotate_gc")


rule build_gcnv_model_coverage:
    input:
        unpack(wf.get_input_files("gcnv", "coverage")),
    output:
        **wf.get_output_files("gcnv", "coverage"),
    threads: wf.get_resource("gcnv", "coverage", "threads")
    resources:
        time=wf.get_resource("gcnv", "coverage", "time"),
        memory=wf.get_resource("gcnv", "coverage", "memory"),
        partition=wf.get_resource("gcnv", "coverage", "partition"),
    log:
        wf.get_log_file("gcnv", "coverage"),
    wrapper:
        wf.wrapper_path("gcnv/coverage")


rule build_gcnv_model_filter_intervals:
    input:
        unpack(wf.get_input_files("gcnv", "filter_intervals")),
    output:
        **wf.get_output_files("gcnv", "filter_intervals"),
    threads: wf.get_resource("gcnv", "filter_intervals", "threads")
    resources:
        time=wf.get_resource("gcnv", "filter_intervals", "time"),
        memory=wf.get_resource("gcnv", "filter_intervals", "memory"),
        partition=wf.get_resource("gcnv", "filter_intervals", "partition"),
    log:
        wf.get_log_file("gcnv", "filter_intervals"),
    wrapper:
        wf.wrapper_path("gcnv/filter_intervals")


rule build_gcnv_model_contig_ploidy:
    input:
        unpack(wf.get_input_files("gcnv", "contig_ploidy")),
    output:
        **wf.get_output_files("gcnv", "contig_ploidy"),
    threads: wf.get_resource("gcnv", "contig_ploidy", "threads")
    resources:
        time=wf.get_resource("gcnv", "contig_ploidy", "time"),
        memory=wf.get_resource("gcnv", "contig_ploidy", "memory"),
        partition=wf.get_resource("gcnv", "contig_ploidy", "partition"),
    log:
        wf.get_log_file("gcnv", "contig_ploidy"),
    wrapper:
        wf.wrapper_path("gcnv/contig_ploidy")


rule build_gcnv_model_call_cnvs:
    input:
        unpack(wf.get_input_files("gcnv", "call_cnvs")),
    output:
        **wf.get_output_files("gcnv", "call_cnvs"),
    threads: wf.get_resource("gcnv", "call_cnvs", "threads")
    resources:
        time=wf.get_resource("gcnv", "call_cnvs", "time"),
        memory=wf.get_resource("gcnv", "call_cnvs", "memory"),
        partition=wf.get_resource("gcnv", "call_cnvs", "partition"),
    log:
        wf.get_log_file("gcnv", "call_cnvs"),
    wrapper:
        wf.wrapper_path("gcnv/call_cnvs_cohort_mode")


def build_gcnv_model_post_germline_calls_input(wildcards):
    return wf.get_input_files("gcnv", "post_germline_calls")(wildcards, checkpoints)


checkpoint build_gcnv_model_scatter_intervals:
    input:
        unpack(wf.get_input_files("gcnv", "scatter_intervals")),
    output:
        directory(wf.get_output_files("gcnv", "scatter_intervals")),
    threads: wf.get_resource("gcnv", "scatter_intervals", "threads")
    resources:
        time=wf.get_resource("gcnv", "scatter_intervals", "time"),
        memory=wf.get_resource("gcnv", "scatter_intervals", "memory"),
        partition=wf.get_resource("gcnv", "scatter_intervals", "partition"),
    log:
        wf.get_log_file("gcnv", "scatter_intervals"),
    wrapper:
        wf.wrapper_path("gcnv/scatter_intervals")


rule build_gcnv_model_calling_gcnv_post_germline_calls:
    input:
        unpack(build_gcnv_model_post_germline_calls_input),
    output:
        **wf.get_output_files("gcnv", "post_germline_calls"),
    threads: wf.get_resource("gcnv", "post_germline_calls", "threads")
    resources:
        time=wf.get_resource("gcnv", "post_germline_calls", "time"),
        memory=wf.get_resource("gcnv", "post_germline_calls", "memory"),
        partition=wf.get_resource("gcnv", "post_germline_calls", "partition"),
    log:
        wf.get_log_file("gcnv", "post_germline_calls"),
    wrapper:
        wf.wrapper_path("gcnv/post_germline_calls")
