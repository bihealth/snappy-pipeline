# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_variant_signatures step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_variant_signatures import SomaticVariantSignaturesWorkflow

__author__ = "Clemens Messerschmidt"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticVariantSignaturesWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_variant_signatures_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule somatic_variant_signatures_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic variant signatures ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Tabulate VCF ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule somatic_variant_signatures_tabulate_vcf:
    input:
        **( wf. get_input_files('tabulate_vcf','run')),
    output:
        **wf. get_output_files('tabulate_vcf','run'),
    threads: wf.get_resource("tabulate_vcf", "run", "threads")
    resources:
        time=wf.get_resource("tabulate_vcf", "run", "time"),
        mem=wf.get_resource("tabulate_vcf", "run", "memory"),
        partition=wf.get_resource("tabulate_vcf", "run", "partition"),
    log:
        wf.get_log_file("tabulate_vcf", "run"),
    wrapper:
        wf.wrapper_path("signatures/tabulate_vcf")


# Run R deconstructSigs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule somatic_variant_signatures_deconstructsigs:
    input:
        **( wf. get_input_files('deconstruct_sigs','run')),
    output:
        **wf. get_output_files('deconstruct_sigs','run'),
    threads: wf.get_resource("deconstruct_sigs", "run", "threads")
    resources:
        time=wf.get_resource("deconstruct_sigs", "run", "time"),
        mem=wf.get_resource("deconstruct_sigs", "run", "memory"),
        partition=wf.get_resource("deconstruct_sigs", "run", "partition"),
    log:
        wf.get_log_file("deconstruct_sigs", "run"),
    wrapper:
        wf.wrapper_path("signatures/deconstruct_sigs")
