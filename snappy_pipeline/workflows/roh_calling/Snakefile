# -*- coding: utf-8 -*-
"""CUBI Pipeline roh_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.roh_calling import RohCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = RohCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    roh_calling_link_out_run,
    # Linking ROH BED files should also be done locally
    roh_calling_bcftools_roh_link_bed,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule roh_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# ROH Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run bcftools roh ------------------------------------------------------------


rule roh_calling_bcftools_roh_run:
    input:
        unpack(wf.get_input_files("bcftools_roh", "run")),
    output:
        **wf. get_output_files('bcftools_roh','run'),
    threads: wf.get_resources("bcftools_roh", "run", "threads")
    resources:
        time=wf.get_resource("bcftools_roh", "run", "time"),
        mem=wf.get_resource("bcftools_roh", "run", "memory"),
        partition=wf.get_resources("bcftools_roh", "run", "partition"),
    log:
        wf.get_log_file("bcftools_roh", "run"),
    wrapper:
        wf.wrapper_path("bcftools_roh/run")


# Generate ROH BED files ------------------------------------------------------


rule roh_calling_bcftools_roh_make_bed:
    input:
        unpack(wf.get_input_files("bcftools_roh", "make_bed")),
    output:
        **wf. get_output_files('bcftools_roh','make_bed'),
    threads: wf.get_resources("bcftools_roh", "make_bed", "threads")
    resources:
        time=wf.get_resource("bcftools_roh", "make_bed", "time"),
        mem=wf.get_resource("bcftools_roh", "make_bed", "memory"),
        partition=wf.get_resources("bcftools_roh", "make_bed", "partition"),
    log:
        wf.get_log_file("bcftools_roh", "make_bed"),
    wrapper:
        wf.wrapper_path("bcftools_roh/make_bed")


# Internal linking of ROH BED files -------------------------------------------


rule roh_calling_bcftools_roh_link_bed:
    input:
        unpack(wf.get_input_files("bcftools_roh", "link_bed")),
    output:
        **wf. get_output_files('bcftools_roh','link_bed'),
    log:
        wf.get_log_file("bcftools_roh", "link_bed"),
    wrapper:
        wf.wrapper_path("bcftools_roh/link_bed")
