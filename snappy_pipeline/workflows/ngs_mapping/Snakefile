# -*- coding: utf-8 -*-
"""CUBI Pipeline ngs_mapping step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.ngs_mapping import NgsMappingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = NgsMappingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking the FASTQ files in and linking out the alignments should
    # be done locally by the Snakemake master process
    ngs_mapping_link_in_run,
    ngs_mapping_link_out_bam_run,
    ngs_mapping_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Link in FASTQ files ---------------------------------------------------------


rule ngs_mapping_link_in_run:  # localrule
    input:
        wf.get_input_files("link_in", "run"),
    output:
        wf.get_output_files("link_in", "run"),
    run:
        shell(wf.get_shell_cmd("link_in", "run", wildcards))


# Link out BAM files ----------------------------------------------------------


rule ngs_mapping_link_out_bam_run:  # localrule
    input:
        wf.get_input_files("link_out_bam", "run"),
    output:
        wf.get_output_files("link_out_bam", "run"),
    run:
        shell(wf.get_shell_cmd("link_out_bam", "run", wildcards))


# Generic linking out ---------------------------------------------------------


rule ngs_mapping_link_out_run:  # localrule
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Alignment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run link in external bam files ----------------------------------------------


rule ngs_mapping_external_run:
    input:
        wf.get_input_files("external", "run"),
    output:
        **wf.get_output_files("external", "run"),
    threads: wf.get_resource("external", "run", "threads")
    resources:
        time=wf.get_resource("external", "run", "time"),
        memory=wf.get_resource("external", "run", "memory"),
        partition=wf.get_resource("external", "run", "partition"),
    params:
        args=wf.substep_dispatch("external", "get_args", "run"),
    log:
        **wf.get_log_file("external", "run"),
    wrapper:
        wf.wrapper_path("link_in_bam")


# Run BWA ---------------------------------------------------------------------


rule ngs_mapping_bwa_run:
    input:
        wf.get_input_files("bwa", "run"),
    output:
        **wf.get_output_files("bwa", "run"),
    threads: wf.get_resource("bwa", "run", "threads")
    resources:
        time=wf.get_resource("bwa", "run", "time"),
        memory=wf.get_resource("bwa", "run", "memory"),
        partition=wf.get_resource("bwa", "run", "partition"),
    params:
        args=wf.substep_dispatch("bwa", "get_args", "run"),
    log:
        **wf.get_log_file("bwa", "run"),
    wrapper:
        wf.wrapper_path("bwa")  # TODO => bwa/run


# Run STAR --------------------------------------------------------------------


rule ngs_mapping_star_run:
    input:
        wf.get_input_files("star", "run"),
    output:
        **wf.get_output_files("star", "run"),
    threads: wf.get_resource("star", "run", "threads")
    resources:
        time=wf.get_resource("star", "run", "time"),
        memory=wf.get_resource("star", "run", "memory"),
        partition=wf.get_resource("star", "run", "partition"),
    params:
        args=wf.substep_dispatch("star", "get_args", "run"),
    log:
        **wf.get_log_file("star", "run"),
    wrapper:
        wf.wrapper_path("star")  # TODO => star/run


# GATK-based BAM postprocessing -----------------------------------------------

if wf.config["postprocessing"] == "gatk_post_bam":

    rule ngs_mapping_gatk_post_bam_run:
        input:
            wf.get_input_files("gatk_post_bam", "run"),
        output:
            **wf.get_output_files("gatk_post_bam", "run"),
        threads: wf.get_resource("gatk_post_bam", "run", "threads")
        resources:
            time=wf.get_resource("gatk_post_bam", "run", "time"),
            memory=wf.get_resource("gatk_post_bam", "run", "memory"),
            partition=wf.get_resource("gatk_post_bam", "run", "partition"),
        log:
            **wf.get_log_file("gatk_post_bam", "run"),
        wrapper:
            wf.wrapper_path("gatk_post_bam")  # TODO => gatk_post_bam/run
# Run minimap2 ---------------------------------------------------------------



rule ngs_mapping_minimap2_run:
    input:
        wf.get_input_files("minimap2", "run"),
    output:
        **wf.get_output_files("minimap2", "run"),
    threads: wf.get_resource("minimap2", "run", "threads")
    resources:
        time=wf.get_resource("minimap2", "run", "time"),
        memory=wf.get_resource("minimap2", "run", "memory"),
        partition=wf.get_resource("minimap2", "run", "partition"),
    log:
        **wf.get_log_file("minimap2", "run"),
    wrapper:
        wf.wrapper_path("minimap2")


# Run NGMLR -------------------------------------------------------------------


rule ngs_mapping_ngmlr_run:
    input:
        wf.get_input_files("ngmlr", "run"),
    output:
        **wf.get_output_files("ngmlr", "run"),
    threads: wf.get_resource("ngmlr", "run", "threads")
    resources:
        time=wf.get_resource("ngmlr", "run", "time"),
        memory=wf.get_resource("ngmlr", "run", "memory"),
        partition=wf.get_resource("ngmlr", "run", "partition"),
    params:
        chained=False,
    log:
        **wf.get_log_file("ngmlr", "run"),
    wrapper:
        wf.wrapper_path("ngmlr/run")


# QC / Statistics ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generate Picard Hybrid Selection Metrics Report -----------------------------


rule ngs_mapping_picard_hs_metrics_run:
    input:
        **wf.get_input_files("picard_hs_metrics", "run"),
    output:
        **wf.get_output_files("picard_hs_metrics", "run"),
    threads: wf.get_resource("picard_hs_metrics", "run", "threads")
    resources:
        time=wf.get_resource("picard_hs_metrics", "run", "time"),
        memory=wf.get_resource("picard_hs_metrics", "run", "memory"),
        partition=wf.get_resource("picard_hs_metrics", "run", "partition"),
    log:
        wf.get_log_file("picard_hs_metrics", "run"),
    wrapper:
        wf.wrapper_path("picard/hs_metrics")


# Generate target region coverage report --------------------------------------


rule ngs_mapping_target_coverage_report_run:
    input:
        unpack(wf.get_input_files("target_coverage_report", "run")),
    output:
        **wf.get_output_files("target_coverage_report", "run"),
    threads: wf.get_resource("target_coverage_report", "run", "threads")
    resources:
        time=wf.get_resource("target_coverage_report", "run", "time"),
        memory=wf.get_resource("target_coverage_report", "run", "memory"),
        partition=wf.get_resource("target_coverage_report", "run", "partition"),
    params:
        **{"args": wf.get_params("target_coverage_report", "run")},
    log:
        wf.get_log_file("target_coverage_report", "run"),
    wrapper:
        wf.wrapper_path("target_cov_report/run")


# Collect target region reports -----------------------------------------------


rule ngs_mapping_target_coverage_report_collect:
    input:
        wf.get_input_files("target_coverage_report", "collect"),
    output:
        **wf.get_output_files("target_coverage_report", "collect"),
    threads: wf.get_resource("target_coverage_report", "run", "threads")
    resources:
        time=wf.get_resource("target_coverage_report", "run", "time"),
        memory=wf.get_resource("target_coverage_report", "run", "memory"),
        partition=wf.get_resource("target_coverage_report", "run", "partition"),
    log:
        wf.get_log_file("target_coverage_report", "collect"),
    wrapper:
        wf.wrapper_path("target_cov_report/collect")


# Compute and link out per-base coverage report -------------------------------


rule ngs_mapping_genome_coverage_report_run:
    input:
        **wf.get_input_files("genome_coverage_report", "run"),
    output:
        **wf.get_output_files("genome_coverage_report", "run"),
    threads: wf.get_resource("genome_coverage_report", "run", "threads")
    resources:
        time=wf.get_resource("genome_coverage_report", "run", "time"),
        memory=wf.get_resource("genome_coverage_report", "run", "memory"),
        partition=wf.get_resource("genome_coverage_report", "run", "partition"),
    log:
        wf.get_log_file("genome_coverage_report", "run"),
    run:
        shell(wf.get_shell_cmd("genome_coverage_report", "run", wildcards))
