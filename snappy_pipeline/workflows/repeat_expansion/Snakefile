# -*- coding: utf-8 -*-
"""CUBI Pipeline repeat_expansion step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.repeat_expansion import RepeatExpansionWorkflow


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = RepeatExpansionWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())


# Modules =====================================================================


module ngs_mapping:
    snakefile:
        "../ngs_mapping/Snakefile"
    config:
        wf.w_config
    prefix:
        wf.config.get("path_ngs_mapping", "../ngs_mapping")


use rule * from ngs_mapping


# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    repeat_expansion_link_out_run,


rule repeat_expansion_all:
    input:
        wf.get_result_files(),
    default_target: True


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule repeat_expansion_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


rule repeat_expansion_run_expansionhunter:
    input:
        wf.get_input_files("expansionhunter", "run"),
    output:
        **wf.get_output_files("expansionhunter", "run"),
    threads: wf.get_resource("expansionhunter", "run", "threads")
    resources:
        time=wf.get_resource("expansionhunter", "run", "time"),
        memory=wf.get_resource("expansionhunter", "run", "memory"),
        partition=wf.get_resource("expansionhunter", "run", "partition"),
        tmpdir=wf.get_resource("expansionhunter", "run", "tmpdir"),
    params:
        **{"args": wf.get_params("expansionhunter", "run")},
    log:
        wf.get_log_file("expansionhunter", "run"),
    wrapper:
        wf.wrapper_path("expansionhunter")


rule repeat_expansion_annotate_expansionhunter:
    input:
        wf.get_input_files("expansionhunter", "annotate"),
    output:
        **wf.get_output_files("expansionhunter", "annotate"),
    threads: wf.get_resource("expansionhunter", "run", "threads")
    resources:
        time=wf.get_resource("expansionhunter", "run", "time"),
        memory=wf.get_resource("expansionhunter", "run", "memory"),
        partition=wf.get_resource("expansionhunter", "run", "partition"),
        tmpdir=wf.get_resource("expansionhunter", "run", "tmpdir"),
    run:
        wf.substep_getattr("expansionhunter", "annotate_results")(wildcards, input, output)
