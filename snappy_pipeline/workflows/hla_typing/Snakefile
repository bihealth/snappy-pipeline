# -*- coding: utf-8 -*-
"""CUBI Pipeline hla_typing step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.hla_typing import HlaTypingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = HlaTypingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking the FASTQ files in and linking out the alignments should
    # be done locally by the Snakemake master process
    hla_typing_link_in_run,
    hla_typing_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Link in FASTQ files ---------------------------------------------------------


rule hla_typing_link_in_run:
    input:
        wf.get_input_files("link_in", "run"),
    output:
        wf.get_output_files("link_in", "run"),
    run:
        shell(wf.get_shell_cmd("link_in", "run", wildcards))


# Generic linking out ---------------------------------------------------------


rule hla_typing_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# HLA Typing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# OptiType --------------------------------------------------------------------


rule hla_typing_optitype_run:
    input:
        **wf.get_input_files("optitype", "run"),
    output:
        **wf.get_output_files("optitype", "run"),
    threads: wf.get_resource("optitype", "run", "threads")
    resources:
        time=wf.get_resource("optitype", "run", "time"),
        memory=wf.get_resource("optitype", "run", "memory"),
        partition=wf.get_resource("optitype", "run", "partition"),
        tmpdir=wf.get_resource("optitype", "run", "tmpdir"),
    log:
        **wf.get_log_file("optitype", "run"),
    params:
        args=wf.get_args("optitype", "run"),
    wrapper:
        wf.wrapper_path("optitype")


# arcasHLA --------------------------------------------------------------------


# NB: reference is updated in the installed package
rule hla_typing_arcashla_prepare_reference:
    output:
        touch("work/arcashla.prepare_reference/out/.done"),
    log:
        "work/arcashla.prepare_reference/log/arcashla.prepare_reference.log",
    wrapper:
        wf.wrapper_path("arcashla/prepare_reference")


rule hla_typing_arcashla_run:
    input:
        unpack(wf.get_input_files("arcashla", "run")),
    output:
        **wf.get_output_files("arcashla", "run"),
    threads: wf.get_resource("arcashla", "run", "threads")
    resources:
        time=wf.get_resource("arcashla", "run", "time"),
        memory=wf.get_resource("arcashla", "run", "memory"),
        partition=wf.get_resource("arcashla", "run", "partition"),
        tmpdir=wf.get_resource("arcashla", "run", "tmpdir"),
    log:
        wf.get_log_file("arcashla", "run"),
    wrapper:
        wf.wrapper_path("arcashla/run")
