# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_gene_fusion_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_gene_fusion_calling import SomaticGeneFusionCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticGeneFusionCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files should be done locally
    somatic_gene_fusion_calling_link_in_run,
    somatic_gene_fusion_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Link in FASTQ files ---------------------------------------------------------


rule somatic_gene_fusion_calling_link_in_run:
    input:
        wf.get_input_files("link_in", "run"),
    output:
        wf.get_output_files("link_in", "run"),
    run:
        shell(wf.get_shell_cmd("link_in", "run", wildcards))


# Generic linking out ---------------------------------------------------------


rule somatic_gene_fusion_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic Gene Fusion Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run Fusioncatcher -----------------------------------------------------------


rule somatic_gene_fusion_calling_fusioncatcher_run:
    input:
        **wf. get_input_files('fusioncatcher','run'),
    output:
        **wf. get_output_files('fusioncatcher','run'),
    threads: wf.get_resource("fusioncatcher", "run", "threads")
    resources:
        time=wf.get_resource("fusioncatcher", "run", "time"),
        memory=wf.get_resource("fusioncatcher", "run", "memory"),
        partition=wf.get_resource("fusioncatcher", "run", "partition"),
    params:
        args=wf.substep_dispatch("fusioncatcher", "get_args", "run"),
    log:
        wf.get_log_file("fusioncatcher", "run"),
    wrapper:
        wf.wrapper_path("fusioncatcher/run")


# Run Jaffa -------------------------------------------------------------------


rule somatic_gene_fusion_calling_jaffa_run:
    input:
        **wf. get_input_files('jaffa','run'),
    output:
        **wf. get_output_files('jaffa','run'),
    threads: wf.get_resource("jaffa", "run", "threads")
    resources:
        time=wf.get_resource("jaffa", "run", "time"),
        memory=wf.get_resource("jaffa", "run", "memory"),
        partition=wf.get_resource("jaffa", "run", "partition"),
    params:
        args=wf.substep_dispatch("jaffa", "get_args", "run"),
    log:
        wf.get_log_file("jaffa", "run"),
    wrapper:
        wf.wrapper_path("jaffa/run")


# Run Kallisto + Pizzly -------------------------------------------------------


rule somatic_gene_fusion_calling_pizzly_run:
    input:
        **wf. get_input_files('pizzly','run'),
    output:
        **wf. get_output_files('pizzly','run'),
    threads: wf.get_resource("pizzly", "run", "threads")
    resources:
        time=wf.get_resource("pizzly", "run", "time"),
        memory=wf.get_resource("pizzly", "run", "memory"),
        partition=wf.get_resource("pizzly", "run", "partition"),
    params:
        args=wf.substep_dispatch("pizzly", "get_args", "run"),
    log:
        wf.get_log_file("pizzly", "run"),
    wrapper:
        wf.wrapper_path("pizzly/run")


# Run Hera --------------------------------------------------------------------


rule somatic_gene_fusion_calling_hera_run:
    input:
        **wf. get_input_files('hera','run'),
    output:
        **wf. get_output_files('hera','run'),
    threads: wf.get_resource("hera", "run", "threads")
    resources:
        time=wf.get_resource("hera", "run", "time"),
        memory=wf.get_resource("hera", "run", "memory"),
        partition=wf.get_resource("hera", "run", "partition"),
    params:
        args=wf.substep_dispatch("hera", "get_args", "run"),
    log:
        wf.get_log_file("hera", "run"),
    wrapper:
        wf.wrapper_path("hera/quant")


# Run STAR-Fusion -------------------------------------------------------------


rule somatic_gene_fusion_calling_star_fusion_run:
    input:
        **wf. get_input_files('star_fusion','run'),
    output:
        **wf. get_output_files('star_fusion','run'),
    threads: wf.get_resource("star_fusion", "run", "threads")
    resources:
        time=wf.get_resource("star_fusion", "run", "time"),
        memory=wf.get_resource("star_fusion", "run", "memory"),
        partition=wf.get_resource("star_fusion", "run", "partition"),
    params:
        args=wf.substep_dispatch("star_fusion", "get_args", "run"),
    log:
        wf.get_log_file("star_fusion", "run"),
    wrapper:
        wf.wrapper_path("star_fusion")


# Run Defuse ------------------------------------------------------------------


rule somatic_gene_fusion_calling_defuse_run:
    input:
        **wf. get_input_files('defuse','run'),
    output:
        **wf. get_output_files('defuse','run'),
    threads: wf.get_resource("defuse", "run", "threads")
    resources:
        time=wf.get_resource("defuse", "run", "time"),
        memory=wf.get_resource("defuse", "run", "memory"),
        partition=wf.get_resource("defuse", "run", "partition"),
    params:
        args=wf.substep_dispatch("defuse", "get_args", "run"),
    log:
        wf.get_log_file("defuse", "run"),
    wrapper:
        wf.wrapper_path("defuse")
