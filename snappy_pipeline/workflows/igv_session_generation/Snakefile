# -*- coding: utf-8 -*-
"""CUBI Pipeline igv_session_generation step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.igv_session_generation import (
    IgvSessionGenerationWorkflow,
)

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = IgvSessionGenerationWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())


# Modules =====================================================================


module ngs_mapping:
    snakefile:
        "../ngs_mapping/Snakefile"
    config:
        wf.w_config
    prefix:
        wf.config.get("path_ngs_mapping", "../ngs_mapping")


use rule * from ngs_mapping


if wf.config["path_variant_phasing"]:

    module variant_phasing:
        snakefile:
            "../variant_phasing/Snakefile"
        config:
            wf.w_config
        prefix:
            wf.config.get("path_variant_phasing", "../variant_phasing")

    use rule * from variant_phasing


if wf.config["path_variant_annotation"]:

    module variant_annotation:
        snakefile:
            "../variant_annotation/Snakefile"
        config:
            wf.w_config
        prefix:
            wf.config.get("path_variant_annotation", "../variant_annotation")

    use rule * from variant_annotation


if wf.config["path_variant_calling"]:

    module variant_calling:
        snakefile:
            "../variant_calling/Snakefile"
        config:
            wf.w_config
        prefix:
            wf.config.get("path_variant_calling", "../variant_calling")

    use rule * from variant_calling


# Rules =======================================================================


localrules:
    # Linking out the alignments should be done locally by the Snakemake
    # master process
    igv_session_generation_link_out_run,


rule igv_session_generation_all:
    input:
        wf.get_result_files(),
    default_target: True


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule igv_session_generation_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# IGV Session Generation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule igv_session_generation_write_igv_session_file:
    input:
        unpack(wf.get_input_files("write_igv_session_file", "run")),
    output:
        **wf.get_output_files("write_igv_session_file", "run"),
    threads: wf.get_resource("write_igv_session_file", "run", "threads")
    resources:
        time=wf.get_resource("write_igv_session_file", "run", "time"),
        memory=wf.get_resource("write_igv_session_file", "run", "memory"),
        partition=wf.get_resource("write_igv_session_file", "run", "partition"),
        tmpdir=wf.get_resource("write_igv_session_file", "run", "tmpdir"),
    run:
        wf.substep_dispatch("write_igv_session_file", "run", wildcards, output)
