"""Implementation of the ``varfish_export_step``

This step processes variant call and quality control information output of other pipeline
steps and prepares them for import into VarFish via ``varfish-cli``.

==========
Properties
==========

overall stability

    **stable**

applicable to

    germline alignment and variant calling data

generally applicable to

    short read DNA sequencing

==========
Step Input
==========

The step will read in

- quality control data from ``ngs_mapping``
- variant call output data from ``variant_calling`` and ``sv_calling_targeted``

===========
Step Output
===========

TODO

=============
Configuration
=============

By default, input from ``ngs_mapping`` and ``variant_calling`` is enabled by setting the
appropriate input paths.

You should enable ``sv_calling_targeted`` or ``sv_calling_wgs`` if you used the corresponding
steps (and have the corresponding data types).

=====================
Default Configuration
=====================

The default configuration is as follows. Note that the ``path_jannovar_ser`` parameter must
be set to point to the desired transcript annotations db as generated by ``jannovar download``.

.. include:: DEFAULT_CONFIG_varfish_export.rst
"""

from itertools import chain
from pathlib import Path
import re
import typing
import warnings

from attrs import define

from biomedsheets.shortcuts import GermlineCaseSheet, Pedigree, defaultdict, is_not_background
from matplotlib.cbook import flatten
from snakemake.io import Wildcards, expand

from snappy_pipeline.base import SkipLibraryWarning
from snappy_pipeline.utils import DictQuery, dictify, listify
from snappy_pipeline.workflows.abstract import (
    BaseStep,
    BaseStepPart,
    LinkOutStepPart,
    ResourceUsage,
    WritePedigreeSampleNameStepPart,
    WritePedigreeStepPart,
)
from snappy_pipeline.workflows.abstract.common import SnakemakeDict, SnakemakeDictItemsGenerator
from snappy_pipeline.workflows.abstract.warnings import InconsistentPedigreeWarning
from snappy_pipeline.workflows.common.gcnv.gcnv_common import InconsistentLibraryKitsWarning
from snappy_pipeline.workflows.ngs_mapping import NgsMappingWorkflow
from snappy_pipeline.workflows.sv_calling_targeted import SvCallingTargetedWorkflow
from snappy_pipeline.workflows.variant_calling import (
    VariantCallingGetLogFileMixin,
    VariantCallingWorkflow,
)
from snappy_pipeline.workflows.varfish_export import (
    MehariStepPart
)

__author__ = "Max Xiaohang Zhao <max.zhao@charite.de>"

#: Extension of files
EXTS = (".tsv.gz", ".tsv.gz.md5")

# TODO: the number of restart times is high because tabix in HTSJDK/Jannovar is flaky...

#: Default configuration for the somatic_variant_calling step
DEFAULT_CONFIG = r"""
# Default configuration varfish_export.
step_config:
  varfish_export_external:
    # Configuration of the input path enables export from the corresponding pipeline step.
    #
    # Used output of ngs_mapping is alignment quality control data
    path_ngs_mapping: ../ngs_mapping
    # Used output of variant_calling is variant calls
    path_variant_calling: ../variant_calling
    # Used output of targeted SV calling is variant calls
    path_sv_calling_targeted: null  # REQUIRED; optional
    # Used output of WGS SV calling is variant calls
    path_sv_calling_wgs: null       # REQUIRED; optional

    # Optionally, you can override the exported mappers and variant callers by setting
    # the following variables.
    tools_ngs_mapping: REQUIRED
    tools_variant_calling: null
    tools_sv_calling_targeted: null
    tools_sv_calling_wgs: null

    # The following configuration is used for parameterizing the output itself.
    #
    # The release of the genome reference that data has been aligned to.
    release: GRCh37              # REQUIRED: default 'GRCh37'
    # Path to BED file with exons; used for reducing data to near-exon small variants.
    path_exon_bed: null          # REQUIRED: exon BED file to use
    # Path to mehari database.
    path_mehari_db: REQUIRED     # REQUIRED: path to mehari database
"""

@define(frozen=True)
class LinkInConfig:
    output_pattern: str
    search_pattern: str

    def create_output_path(self, group_dict: dict) -> str:
        return self.output_pattern.format_map(group_dict)

    def search(self, sequence: typing.Any) -> typing.Optional[dict]:
        """Search for the specified pattern in sequence. Returns none if match failed."""
        str_seq = str(sequence)
        if match := re.search(self.search_pattern, str_seq):
            return match.groupdict()
        return None


class LinkInExternalStepPart(BaseStepPart):
    name = "link_in_external"
    link_ins: typing.List[LinkInConfig] = []
    search_path: Path = Path()

    def __init__(self, parent):
        super().__init__(parent)

        self.link_ins = [
            LinkInConfig(**c) for c in self.config["link_ins"]
        ]
        self.search_path = Path(self.config["path_external"])
        self._found_paths = None

    @property
    def _prefix(self) -> str:
        prefix = f"{self.parent.work_dir}/output"
        return prefix

    def _find_outputs(self) -> dict:
        """Find outputs based on link_ins and search directories."""

        # cache results
        if self._found_paths is not None:
            return self._found_paths

        found_paths = {}
        for path in self.search_path.rglob("*"):
            for link_pattern in self.link_ins:
                if obj := link_pattern.search(path):
                    found_paths[path] = link_pattern.create_output_path(obj)

        self._found_paths = found_paths
        return found_paths


    def get_input_files(self, _):
        """No inputs are required for an link_in step."""
        return []

    def get_output_files(self, _):
        """Return found output files."""
        found_outputs = self._find_outputs()
        output_files = [f"{self._prefix}/{p}" for p in found_outputs.values()]
        return output_files

    def run(self, wildcards, output):
        results = self._find_outputs()
        for source_path, dest_path in results.items():
            source_path = Path(source_path)
            dest_path = self._prefix / Path(dest_path)
            if not dest_path.exists():
                dest_path.parent.mkdir(exist_ok=True, parents=True)
                dest_path.symlink_to(source_path)


class VarfishExportExternalWorkflow(BaseStep):
    """Perform germline variant export to VarFish from externally generated data."""

    name = "varfish_export_external"
    sheet_shortcut_class = GermlineCaseSheet

    @classmethod
    def default_config_yaml(cls):
        """Return default config YAML, to be overwritten by project-specific one"""
        return DEFAULT_CONFIG

    def __init__(self, workflow, config, config_lookup_paths, config_paths, workdir):
        super().__init__(
            workflow,
            config,
            config_lookup_paths,
            config_paths,
            workdir,
            (VariantCallingWorkflow, SvCallingTargetedWorkflow, NgsMappingWorkflow),
        )

        # Register sub step classes so the sub steps are available
        self.register_sub_step_classes((LinkInExternalStepPart, WritePedigreeSampleNameStepPart, MehariStepPart, LinkOutStepPart))

        # Copy over "tools" setting from variant_calling/ngs_mapping if not set here
        step_config = self.w_config["step_config"]

        # everything will be linked to this step by our link_in helper
        if not self.config["tools_ngs_mapping"]:
            self.config["tools_ngs_mapping"] = step_config["ngs_mapping"]["tools"]["dna"]
        if not self.config["tools_variant_calling"] and "variant_calling" in step_config:
            self.config["tools_variant_calling"] = step_config["variant_calling"]["tools"]
        if (
            not self.config["tools_sv_calling_targeted"]
            and "sv_calling_targeted" in self.w_config["step_config"]
        ):
            self.config["tools_sv_calling_targeted"] = step_config["sv_calling_targeted"]["tools"]
        if (
            not self.config["tools_sv_calling_wgs"]
            and "sv_calling_wgs" in self.w_config["step_config"]
        ):
            self.config["tools_sv_calling_wgs"] = step_config["sv_calling_wgs"]["tools"]

        # Build additional information
        self.ngs_library_to_kit = self._build_ngs_library_to_kit()

    @dictify
    def _build_ngs_library_to_kit(self):
        """Build mapping of NGS library to kit based on the ``ngs_mapping`` configuration"""
        cov_config = DictQuery(self.w_config).get("step_config/ngs_mapping/target_coverage_report")
        regexes = {
            item["pattern"]: item["name"]
            for item in cov_config["path_target_interval_list_mapping"]
            if item["name"] != "__default__"
        }
        result = {}
        for sheet in self.shortcut_sheets:
            for donor in sheet.donors:
                for bio_sample in donor.bio_samples.values():
                    for test_sample in bio_sample.test_samples.values():
                        for library in test_sample.ngs_libraries.values():
                            if library.extra_infos.get("libraryKit"):
                                library_kit = library.extra_infos.get("libraryKit")
                                for pattern, name in regexes.items():
                                    if re.match(pattern, library_kit):
                                        yield library.name, name
        return result

    @listify
    def get_result_files(self):
        """Return list of result files for the NGS mapping workflow

        We will process all primary DNA libraries and perform joint calling within pedigrees
        """
        skipped_actions = ("bam_qc",)
        for action in self.sub_steps["mehari"].actions:
            if action not in skipped_actions:
                yield from self.sub_steps["mehari"].get_result_files(action)

    def check_config(self):
        self.ensure_w_config(
            ("step_config", "varfish_export_external", "path_mehari_db"),
            "Path to mehari_db configured but required for varfish export",
        )
        self.ensure_w_config(
            ("step_config", "varfish_export_external", "tools_ngs_mapping"),
            "Tool used for ngs_mappping needs to be explicitly set.",
        )
