# -*- coding: utf-8 -*-
"""CUBI Pipeline variant_denovo_filtration step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.variant_denovo_filtration import (
    VariantDeNovoFiltrationWorkflow,
)

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = VariantDeNovoFiltrationWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    variant_denovo_filtration_link_out_run,
    # Writing pedigrees should be done locally
    variant_denovo_filtration_write_pedigree_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule variant_denovo_filtration_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Variant Filtration ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out trio pedigree file ------------------------------------------------


rule variant_denovo_filtration_write_pedigree_run:
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# Apply Filters ---------------------------------------------------------------


rule variant_denovo_filtration_filter_denovo_run:
    input:
        unpack(wf.get_input_files("filter_denovo", "run")),
    output:
        **wf.get_output_files("filter_denovo", "run"),
    params:
        args=wg.get_args("filter_denovo", "run"),
    threads: wf.get_resource("filter_denovo", "run", "threads")
    resources:
        time=wf.get_resource("filter_denovo", "run", "time"),
        memory=wf.get_resource("filter_denovo", "run", "memory"),
        partition=wf.get_resource("filter_denovo", "run", "partition"),
        tmpdir=wf.get_resource("filter_denovo", "run", "tmpdir"),
    log:
        wf.get_log_file("filter_denovo", "run"),
    wrapper:
        wf.wrapper_path("variant_filtration/filter_denovo")


# Hard-Filter Variants --------------------------------------------------------


rule variant_denovo_filtration_filter_denovo_hard_run:
    input:
        **wf.get_input_files("filter_denovo_hard", "run"),
    output:
        **wf.get_output_files("filter_denovo_hard", "run"),
    threads: wf.get_resource("filter_denovo_hard", "run", "threads")
    resources:
        time=wf.get_resource("filter_denovo_hard", "run", "time"),
        memory=wf.get_resource("filter_denovo_hard", "run", "memory"),
        partition=wf.get_resource("filter_denovo_hard", "run", "partition"),
        tmpdir=wf.get_resource("filter_denovo_hard", "run", "tmpdir"),
    params:
        args=wf.substep_dispatch("filter_denovo_hard", "get_args", "run"),
    log:
        wf.get_log_file("filter_denovo_hard", "run"),
    wrapper:
        wf.wrapper_path("variant_filtration/filter_denovo_hard")


# Generate de novo count summaries --------------------------------------------


rule variant_denovo_filtration_summarize_counts_run:
    input:
        wf.get_input_files("summarize_counts", "run"),
    output:
        **wf.get_output_files("summarize_counts", "run"),
    threads: wf.get_resource("summarize_counts", "run", "threads")
    resources:
        time=wf.get_resource("summarize_counts", "run", "time"),
        memory=wf.get_resource("summarize_counts", "run", "memory"),
        partition=wf.get_resource("summarize_counts", "run", "partition"),
        tmpdir=wf.get_resource("summarize_counts", "run", "tmpdir"),
    log:
        wf.get_log_file("summarize_counts", "run"),
    wrapper:
        wf.wrapper_path("variant_filtration/summarize_counts")


# Generate MSDN list ----------------------------------------------------------


rule variant_denovo_filtration_collect_msdn_run:
    input:
        **wf.get_input_files("collect_msdn", "run"),
    output:
        **wf.get_output_files("collect_msdn", "run"),
    threads: wf.get_resource("collect_msdn", "run", "threads")
    resources:
        time=wf.get_resource("collect_msdn", "run", "time"),
        memory=wf.get_resource("collect_msdn", "run", "memory"),
        partition=wf.get_resource("collect_msdn", "run", "partition"),
        tmpdir=wf.get_resource("collect_msdn", "run", "tmpdir"),
    log:
        wf.get_log_file("collect_msdn", "run"),
    wrapper:
        wf.wrapper_path("variant_filtration/collect_msdn")
