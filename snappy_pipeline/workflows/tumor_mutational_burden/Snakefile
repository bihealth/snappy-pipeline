# -*- coding: utf-8 -*-
"""CUBI Pipeline tumor mutational burden step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.tumor_mutational_burden import (
    TumorMutationalBurdenCalculationWorkflow,
)

__author__ = ""


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================
wf = TumorMutationalBurdenCalculationWorkflow(
    workflow, config, lookup_paths, config_paths, os.getcwd()
)


# Modules =====================================================================
sub_workflow = "somatic_variant_calling"
if config["has_annotation"]:
    sub_workflow = "somatic_variant_annotation"
if config["is_filtered"]:
    sub_workflow = "somatic_variant_filtration"


module somatic_variant:
    snakefile:
        f"../{sub_workflow}/Snakefile"
    config:
        wf.w_config
    prefix:
        wf.config.get("path_somatic_variant", os.path.join("..", sub_workflow))


use rule * from somatic_variant


# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    tumor_mutational_burden_link_out_run,


rule tumor_mutational_burden_all:
    input:
        wf.get_result_files(),
    default_target: True


# Generic linking out ---------------------------------------------------------


rule tumor_mutational_burden_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


rule tumor_mutational_burden_calculation:
    input:
        **wf.get_input_files("tmb_gathering", "run"),
    output:
        **wf.get_output_files("tmb_gathering", "run"),
    threads: wf.get_resource("tmb_gathering", "run", "threads")
    resources:
        time=wf.get_resource("tmb_gathering", "run", "time"),
        memory=wf.get_resource("tmb_gathering", "run", "memory"),
        partition=wf.get_resource("tmb_gathering", "run", "partition"),
        tmpdir=wf.get_resource("tmb_gathering", "run", "tmpdir"),
    params:
        **{"args": wf.get_params("tmb_gathering", "run")},
    log:
        **wf.get_log_file("tmb_gathering", "run"),
    wrapper:
        wf.wrapper_path("bcftools/TMB")
