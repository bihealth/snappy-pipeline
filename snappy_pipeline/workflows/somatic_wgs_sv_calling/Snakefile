# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_wgs_sv_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_wgs_sv_calling import SomaticWgsSvCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticWgsSvCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_wgs_sv_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule somatic_wgs_sv_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run Manta -------------------------------------------------------------------


rule somatic_wgs_sv_calling_manta_run:
    input:
        unpack(wf.get_input_files("manta", "run")),
    output:
        **wf.get_output_files("manta", "run"),
    threads: wf.get_resource("manta", "run", "threads")
    resources:
        time=wf.get_resource("manta", "run", "time"),
        memory=wf.get_resource("manta", "run", "memory"),
        partition=wf.get_resource("manta", "run", "partition"),
    log:
        wf.get_log_file("manta", "run"),
    wrapper:
        wf.wrapper_path("manta/somatic_wgs")
