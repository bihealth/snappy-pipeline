# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_variant_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_variant_calling import (
    SomaticVariantCallingWorkflow,
)

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"

# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticVariantCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_variant_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule somatic_variant_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run MuTect 2 ----------------------------------------------------------------

if wf.w_config.step_config["somatic_variant_calling"].mutect2.common_variants:

    rule somatic_variant_calling_mutect2_pileup_normal:
        input:
            unpack(wf.get_input_files("mutect2", "pileup_normal")),
        output:
            **wf.get_output_files("mutect2", "pileup_normal"),
        threads: wf.get_resource("mutect2", "pileup_normal", "threads")
        resources:
            time=wf.get_resource("mutect2", "pileup_normal", "time"),
            memory=wf.get_resource("mutect2", "pileup_normal", "memory"),
            partition=wf.get_resource("mutect2", "pileup_normal", "partition"),
            tmpdir=wf.get_resource("mutect2", "pileup_normal", "tmpdir"),
        log:
            **wf.get_log_file("mutect2", "pileup_normal"),
        params:
            normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
        wrapper:
            wf.wrapper_path("mutect2/pileup")

    rule somatic_variant_calling_mutect2_pileup_tumor:
        input:
            unpack(wf.get_input_files("mutect2", "pileup_tumor")),
        output:
            **wf.get_output_files("mutect2", "pileup_tumor"),
        threads: wf.get_resource("mutect2", "pileup_tumor", "threads")
        resources:
            time=wf.get_resource("mutect2", "pileup_tumor", "time"),
            memory=wf.get_resource("mutect2", "pileup_tumor", "memory"),
            partition=wf.get_resource("mutect2", "pileup_tumor", "partition"),
            tmpdir=wf.get_resource("mutect2", "pileup_tumor", "tmpdir"),
        log:
            **wf.get_log_file("mutect2", "pileup_tumor"),
        wrapper:
            wf.wrapper_path("mutect2/pileup")

    rule somatic_variant_calling_mutect2_contamination:
        input:
            unpack(wf.get_input_files("mutect2", "contamination")),
        output:
            **wf.get_output_files("mutect2", "contamination"),
        threads: wf.get_resource("mutect2", "contamination", "threads")
        resources:
            time=wf.get_resource("mutect2", "contamination", "time"),
            memory=wf.get_resource("mutect2", "contamination", "memory"),
            partition=wf.get_resource("mutect2", "contamination", "partition"),
            tmpdir=wf.get_resource("mutect2", "contamination", "tmpdir"),
        log:
            **wf.get_log_file("mutect2", "contamination"),
        wrapper:
            wf.wrapper_path("mutect2/contamination")


scattergather:
    mutect2=wf.config.get("mutect2", {}).get("num_jobs", 24),


rule somatic_variant_calling_mutect2_scatter:
    localrule: True
    input:
        unpack(wf.get_input_files("mutect2", "scatter")),
    output:
        **wf.get_output_files("mutect2", "scatter"),
    params:
        **wf.get_params("mutect2", "scatter"),
    resources:
        time=wf.get_resource("mutect2", "scatter", "time"),
        memory=wf.get_resource("mutect2", "scatter", "memory"),
        partition=wf.get_resource("mutect2", "scatter", "partition"),
        tmpdir=wf.get_resource("mutect2", "scatter", "tmpdir"),
    threads: 1
    log:
        **wf.get_log_file("mutect2", "scatter"),
    wrapper:
        wf.wrapper_path("split_regions")


rule somatic_variant_calling_mutect2_run:
    input:
        unpack(wf.get_input_files("mutect2", "run")),
    output:
        **wf.get_output_files("mutect2", "run"),
    resources:
        time=wf.get_resource("mutect2", "run", "time"),
        memory=wf.get_resource("mutect2", "run", "memory"),
        partition=wf.get_resource("mutect2", "run", "partition"),
        tmpdir=wf.get_resource("mutect2", "run", "tmpdir"),
    threads: wf.get_resource("mutect2", "run", "threads")
    log:
        **wf.get_log_file("mutect2", "run"),
    params:
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
    wrapper:
        wf.wrapper_path("mutect2/run")


rule somatic_variant_calling_mutect2_gather:
    input:
        unpack(wf.get_input_files("mutect2", "gather")),
    output:
        **wf.get_output_files("mutect2", "gather"),
    resources:
        time=wf.get_resource("mutect2", "gather", "time"),
        memory=wf.get_resource("mutect2", "gather", "memory"),
        partition=wf.get_resource("mutect2", "gather", "partition"),
        tmpdir=wf.get_resource("mutect2", "gather", "tmpdir"),
    threads: 1
    log:
        **wf.get_log_file("mutect2", "gather"),
    wrapper:
        wf.wrapper_path("mutect2/gather")


rule somatic_variant_calling_mutect2_filter:
    input:
        unpack(wf.get_input_files("mutect2", "filter")),
    output:
        **wf.get_output_files("mutect2", "filter"),
    threads: wf.get_resource("mutect2", "filter", "threads")
    resources:
        time=wf.get_resource("mutect2", "filter", "time"),
        memory=wf.get_resource("mutect2", "filter", "memory"),
        partition=wf.get_resource("mutect2", "filter", "partition"),
        tmpdir=wf.get_resource("mutect2", "filter", "tmpdir"),
    log:
        **wf.get_log_file("mutect2", "filter"),
    params:
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
        tumor_lib_name=wf.substep_getattr("mutect2", "get_tumor_lib_name"),
    wrapper:
        wf.wrapper_path("mutect2/filter")
