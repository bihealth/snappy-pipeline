# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_variant_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_variant_calling import (
    SomaticVariantCallingWorkflow,
)

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"

# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticVariantCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_variant_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule somatic_variant_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run MuTect ------------------------------------------------------------------


rule somatic_variant_calling_mutect_run:
    input:
        unpack(wf.get_input_files("mutect", "run")),
    output:
        **wf.get_output_files("mutect", "run"),
    threads: wf.get_resource("mutect", "run", "threads")
    resources:
        time=wf.get_resource("mutect", "run", "time"),
        memory=wf.get_resource("mutect", "run", "memory"),
        partition=wf.get_resource("mutect", "run", "partition"),
        tmpdir=wf.get_resource("mutect", "run", "tmpdir"),
    log:
        **wf.get_log_file("mutect", "run"),
    wrapper:
        wf.wrapper_path("mutect_par")


# Run MuTect 2 ----------------------------------------------------------------

if wf.w_config.step_config["somatic_variant_calling"].mutect2.common_variants:

    rule somatic_variant_calling_mutect2_pileup_normal:
        input:
            unpack(wf.get_input_files("mutect2", "pileup_normal")),
        output:
            **wf.get_output_files("mutect2", "pileup_normal"),
        threads: wf.get_resource("mutect2", "pileup_normal", "threads")
        resources:
            time=wf.get_resource("mutect2", "pileup_normal", "time"),
            memory=wf.get_resource("mutect2", "pileup_normal", "memory"),
            partition=wf.get_resource("mutect2", "pileup_normal", "partition"),
            tmpdir=wf.get_resource("mutect2", "pileup_normal", "tmpdir"),
        log:
            **wf.get_log_file("mutect2", "pileup_normal"),
        params:
            normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
        wrapper:
            wf.wrapper_path("mutect2/pileup")

    rule somatic_variant_calling_mutect2_pileup_tumor:
        input:
            unpack(wf.get_input_files("mutect2", "pileup_tumor")),
        output:
            **wf.get_output_files("mutect2", "pileup_tumor"),
        threads: wf.get_resource("mutect2", "pileup_tumor", "threads")
        resources:
            time=wf.get_resource("mutect2", "pileup_tumor", "time"),
            memory=wf.get_resource("mutect2", "pileup_tumor", "memory"),
            partition=wf.get_resource("mutect2", "pileup_tumor", "partition"),
            tmpdir=wf.get_resource("mutect2", "pileup_tumor", "tmpdir"),
        log:
            **wf.get_log_file("mutect2", "pileup_tumor"),
        wrapper:
            wf.wrapper_path("mutect2/pileup")

    rule somatic_variant_calling_mutect2_contamination:
        input:
            unpack(wf.get_input_files("mutect2", "contamination")),
        output:
            **wf.get_output_files("mutect2", "contamination"),
        threads: wf.get_resource("mutect2", "contamination", "threads")
        resources:
            time=wf.get_resource("mutect2", "contamination", "time"),
            memory=wf.get_resource("mutect2", "contamination", "memory"),
            partition=wf.get_resource("mutect2", "contamination", "partition"),
            tmpdir=wf.get_resource("mutect2", "contamination", "tmpdir"),
        log:
            **wf.get_log_file("mutect2", "contamination"),
        wrapper:
            wf.wrapper_path("mutect2/contamination")


scattergather:
    mutect2=8,


rule somatic_variant_calling_mutect2_split:
    input:
        unpack(wf.get_input_files("mutect", "run")),
    output:
        regions=temp(
            scatter.mutect2(
                "work/{{mapper}}.mutect2.{{tumor_library}}/out/{{mapper}}.mutect2.{{tumor_library}}/mutect2par/in/{scatteritem}.txt"
            )
        ),
    params:
        padding=5000,
        ignore_chroms=wf.w_config.get("ignore_chroms", wf.config.get("ignore_chroms", [])),
        fai=config["static_data_config"]["reference"]["path"] + ".fai",
    log:
        log="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/in/split.log",
    script:
        "scripts/split_region.py"


rule somatic_variant_calling_mutect2_process:
    input:
        unpack(wf.get_input_files("mutect2", "run")),
        region="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/in/{scatteritem}.txt",
    output:
        raw=temp(
            "work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.raw.vcf.gz"
        ),
        stats=temp(
            "work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.raw.vcf.stats"
        ),
        f1r2=temp(
            "work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.raw.f1r2_tar.tar.gz"
        ),
    resources:
        time=wf.get_resource("mutect2", "run", "time"),
        memory=wf.get_resource("mutect2", "run", "memory"),
        partition=wf.get_resource("mutect2", "run", "partition"),
        tmpdir=wf.get_resource("mutect2", "run", "tmpdir"),
    log:
        log="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.log",
        log_md5="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.log.md5",
        conda_list="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.conda_list",
        conda_info="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.conda_info",
        conda_list_md5="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.conda_list.md5",
        conda_info_md5="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/mutect2par/out/{scatteritem}.conda_info.md5",
    params:
        args=lambda wildcards, input: {
            "intervals": list(map(str.strip, open(input.region, "rt").readlines()))
        },
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
        intervals=lambda wildcards, input: list(
            map(str.strip, open(input.region, "rt").readlines())
        ),
    wrapper:
        wf.wrapper_path("mutect2/run")


rule somatic_variant_calling_mutect2_gather:
    input:
        raw=gather.mutect2(
            "work/{{mapper}}.mutect2.{{tumor_library}}/out/{{mapper}}.mutect2.{{tumor_library}}/mutect2par/out/{scatteritem}.raw.vcf.gz"
        ),
        stats=gather.mutect2(
            "work/{{mapper}}.mutect2.{{tumor_library}}/out/{{mapper}}.mutect2.{{tumor_library}}/mutect2par/out/{scatteritem}.raw.vcf.stats"
        ),
        f1r2=gather.mutect2(
            "work/{{mapper}}.mutect2.{{tumor_library}}/out/{{mapper}}.mutect2.{{tumor_library}}/mutect2par/out/{scatteritem}.raw.f1r2_tar.tar.gz"
        ),
    output:
        **wf.get_output_files("mutect2", "run"),
    conda:
        "envs/mutect2.yaml"
    log:
        log="work/{mapper}.mutect2.{tumor_library}/out/{mapper}.mutect2.{tumor_library}/gather.raw.vcf.gz.log",
    shell:
        """
        # Concatenate raw calls vcfs & index result ----------------------
        bcftools concat \
            --allow-overlaps \
            -d none \
            -o {output.raw} \
            -O z \
            {input.raw}
        tabix -f {output.raw}

        # Concatenate stats with GATK tool -------------------------------
        stats=$(echo "{input.stats}" | sed -e "s/ / -stats /g")
        gatk MergeMutectStats -stats $stats -O {output.stats}

        # Contatenate orientation tar files ------------------------------
        tmpdir=$(mktemp -d)
        for tar_file in {input.f1r2}
        do
            abs_path=$(realpath $tar_file)
            pushd $tmpdir
            tar -zxvf $abs_path
            popd
        done
        tar -zcvf {output.f1r2} -C $tmpdir .
        rm -rf $tmpdir

        # Compute md5 sums -----------------------------------------------
        pushd $(dirname {output.raw})
        for f in *; do
            if [[ -f "$f" ]] && [[ $f != *.md5 ]]; then
                md5sum $f > $f.md5;
            fi;
        done
        popd
        """


rule somatic_variant_calling_mutect2_filter:
    input:
        unpack(wf.get_input_files("mutect2", "filter")),
    output:
        **wf.get_output_files("mutect2", "filter"),
    threads: wf.get_resource("mutect2", "filter", "threads")
    resources:
        time=wf.get_resource("mutect2", "filter", "time"),
        memory=wf.get_resource("mutect2", "filter", "memory"),
        partition=wf.get_resource("mutect2", "filter", "partition"),
        tmpdir=wf.get_resource("mutect2", "filter", "tmpdir"),
    log:
        **wf.get_log_file("mutect2", "filter"),
    params:
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
        tumor_lib_name=wf.substep_getattr("mutect2", "get_tumor_lib_name"),
    wrapper:
        wf.wrapper_path("mutect2/filter")


# Run Scalpel -----------------------------------------------------------------


rule somatic_variant_calling_scalpel_run:
    input:
        unpack(wf.get_input_files("scalpel", "run")),
    output:
        **wf.get_output_files("scalpel", "run"),
    threads: wf.get_resource("scalpel", "run", "threads")
    resources:
        time=wf.get_resource("scalpel", "run", "time"),
        memory=wf.get_resource("scalpel", "run", "memory"),
        partition=wf.get_resource("scalpel", "run", "partition"),
        tmpdir=wf.get_resource("scalpel", "run", "tmpdir"),
    log:
        **wf.get_log_file("scalpel", "run"),
    params:
        normal_lib_name=wf.substep_getattr("scalpel", "get_normal_lib_name"),
    wrapper:
        wf.wrapper_path("scalpel/somatic")


# Run Strelka2 (with manta)  -----------------------------------------------------------------


rule somatic_variant_calling_strelka2_run:
    input:
        unpack(wf.get_input_files("strelka2", "run")),
    output:
        **wf.get_output_files("strelka2", "run"),
    threads: wf.get_resource("strelka2", "run", "threads")
    resources:
        time=wf.get_resource("strelka2", "run", "time"),
        memory=wf.get_resource("strelka2", "run", "memory"),
        partition=wf.get_resource("strelka2", "run", "partition"),
        tmpdir=wf.get_resource("strelka2", "run", "tmpdir"),
    log:
        **wf.get_log_file("strelka2", "run"),
    params:
        normal_lib_name=wf.substep_getattr("strelka2", "get_normal_lib_name"),
        tumor_lib_name=wf.substep_getattr("strelka2", "get_tumor_lib_name"),
    wrapper:
        wf.wrapper_path("strelka2/somatic")


# Run Bcftools call (joint) ---------------------------------------------------


rule somatic_variant_calling_bcftools_joint_run:
    input:
        unpack(wf.get_input_files("bcftools_joint", "run")),
    output:
        **wf.get_output_files("bcftools_joint", "run"),
    threads: wf.get_resource("bcftools_joint", "run", "threads")
    resources:
        time=wf.get_resource("bcftools_joint", "run", "time"),
        memory=wf.get_resource("bcftools_joint", "run", "memory"),
        partition=wf.get_resource("bcftools_joint", "run", "partition"),
        tmpdir=wf.get_resource("bcftools_joint", "run", "tmpdir"),
    params:
        args=wf.substep_dispatch("bcftools_joint", "get_args", "run"),
    log:
        **wf.get_log_file("bcftools_joint", "run"),
    wrapper:
        wf.wrapper_path("bcftools/call_joint")


# Run Platypus (joint) --------------------------------------------------------


rule somatic_variant_calling_platypus_joint_run:
    input:
        unpack(wf.get_input_files("platypus_joint", "run")),
    output:
        **wf.get_output_files("platypus_joint", "run"),
    threads: wf.get_resource("platypus_joint", "run", "threads")
    resources:
        time=wf.get_resource("platypus_joint", "run", "time"),
        memory=wf.get_resource("platypus_joint", "run", "memory"),
        partition=wf.get_resource("platypus_joint", "run", "partition"),
        tmpdir=wf.get_resource("platypus_joint", "run", "tmpdir"),
    params:
        args=wf.substep_dispatch("platypus_joint", "get_args", "run"),
    log:
        **wf.get_log_file("platypus_joint", "run"),
    wrapper:
        wf.wrapper_path("platypus/call_joint")


# Run GATK UG (joint) --------------------------------------------------------


rule somatic_variant_calling_gatk_ug_joint_run:
    input:
        unpack(wf.get_input_files("gatk_ug_joint", "run")),
    output:
        **wf.get_output_files("gatk_ug_joint", "run"),
    threads: wf.get_resource("gatk_ug_joint", "run", "threads")
    resources:
        time=wf.get_resource("gatk_ug_joint", "run", "time"),
        memory=wf.get_resource("gatk_ug_joint", "run", "memory"),
        partition=wf.get_resource("gatk_ug_joint", "run", "partition"),
        tmpdir=wf.get_resource("gatk_ug_joint", "run", "tmpdir"),
    params:
        step_key="somatic_variant_calling",
        caller_key="gatk_ug_joint",
        args=wf.substep_dispatch("gatk_ug_joint", "get_args", "run"),
    log:
        **wf.get_log_file("gatk_ug_joint", "run"),
    wrapper:
        wf.wrapper_path("gatk_ug_par")


# Run GATK HC (joint) --------------------------------------------------------


rule somatic_variant_calling_gatk_hc_joint_run:
    input:
        unpack(wf.get_input_files("gatk_hc_joint", "run")),
    output:
        **wf.get_output_files("gatk_hc_joint", "run"),
    threads: wf.get_resource("gatk_hc_joint", "run", "threads")
    resources:
        time=wf.get_resource("gatk_hc_joint", "run", "time"),
        memory=wf.get_resource("gatk_hc_joint", "run", "memory"),
        partition=wf.get_resource("gatk_hc_joint", "run", "partition"),
        tmpdir=wf.get_resource("gatk_hc_joint", "run", "tmpdir"),
    params:
        step_key="somatic_variant_calling",
        caller_key="gatk_hc_joint",
        args=wf.substep_dispatch("gatk_hc_joint", "get_args", "run"),
    log:
        **wf.get_log_file("gatk_hc_joint", "run"),
    wrapper:
        wf.wrapper_path("gatk_hc_par")


# Run Varscan (joint) -------------------------------------------------------


rule somatic_variant_calling_varscan_joint_run:
    input:
        unpack(wf.get_input_files("varscan_joint", "run")),
    output:
        **wf.get_output_files("varscan_joint", "run"),
    threads: wf.get_resource("varscan_joint", "run", "threads")
    resources:
        time=wf.get_resource("varscan_joint", "run", "time"),
        memory=wf.get_resource("varscan_joint", "run", "memory"),
        partition=wf.get_resource("varscan_joint", "run", "partition"),
        tmpdir=wf.get_resource("varscan_joint", "run", "tmpdir"),
    params:
        args=wf.substep_dispatch("varscan_joint", "get_args", "call_pedigree"),
        step_key="somatic_variant_calling",
        caller_key="varscan_joint",
    log:
        **wf.get_log_file("varscan_joint", "run"),
    wrapper:
        wf.wrapper_path("varscan_par/call_joint")
