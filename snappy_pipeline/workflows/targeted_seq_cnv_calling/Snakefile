# -*- coding: utf-8 -*-
"""CUBI Pipeline targeted_seq_cnv_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.targeted_seq_cnv_calling import TargetedSeqCnvCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = TargetedSeqCnvCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Subworkflow =================================================================


subworkflow gcnv_model_wf:
    """Defines sub-workflow responsible for gCNV model creation."""
    snakefile:
        "gcnv_model.snakefile"
    configfile:
        os.path.join(os.getcwd(), "config.yaml")
    workdir:
        os.getcwd()


# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    targeteq_seq_cnv_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule targeteq_seq_cnv_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Germline CNV Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# XHMM ------------------------------------------------------------------------


include: "xhmm.rules"


# GATK-gCNV -------------------------------------------------------------------

analsys_type = wf.substep_getattr("gcnv", "get_analysis_type")()
if analsys_type == "cohort_mode":

    include: "gcnv_cohort_mode.rules"


elif analsys_type == "case_mode":

    include: "gcnv_case_mode.rules"
