# gCNV with COHORT MODE - build model.


rule targeted_seq_cnv_calling_gcnv_call_cnvs_cohort_mode:
    input:
        unpack(wf.get_input_files("gcnv", "call_cnvs_cohort_mode")),
    output:
        **wf. get_output_files("gcnv","call_cnvs_cohort_mode"),
    threads: wf.get_resource("gcnv", "call_cnvs_cohort_mode", "threads")
    resources:
        time=wf.get_resource("gcnv", "call_cnvs_cohort_mode", "time"),
        mem=wf.get_resource("gcnv", "call_cnvs_cohort_mode", "memory"),
        partition=wf.get_resource("gcnv", "call_cnvs_cohort_mode", "partition"),
    log:
        wf.get_log_file("gcnv", "call_cnvs_cohort_mode"),
    wrapper:
        wf.wrapper_path("gcnv/call_cnvs_cohort_mode")


def targeted_seq_cnv_calling_gcnv_post_germline_calls_input(wildcards):
    return wf.get_input_files("gcnv", "post_germline_calls_cohort_mode")(wildcards, checkpoints)


def get_gcnv_scatter_intervals_input():
    return wf.substep_getattr("gcnv", "get_cnv_model_result_files")(None)


checkpoint targeted_seq_cnv_calling_gcnv_scatter_intervals:
    input:
        gcnv_model_wf(get_gcnv_scatter_intervals_input()),
    output:
        directory(wf.get_output_files("gcnv", "scatter_intervals")),
    threads: wf.get_resource("gcnv", "scatter_intervals", "threads")
    resources:
        time=wf.get_resource("gcnv", "scatter_intervals", "time"),
        mem=wf.get_resource("gcnv", "scatter_intervals", "memory"),
        partition=wf.get_resource("gcnv", "scatter_intervals", "partition"),
    log:
        wf.get_log_file("gcnv", "scatter_intervals"),
    wrapper:
        wf.wrapper_path("gcnv/scatter_intervals")


rule targeted_seq_cnv_calling_gcnv_post_germline_calls:
    input:
        unpack(targeted_seq_cnv_calling_gcnv_post_germline_calls_input),
    output:
        **wf. get_output_files("gcnv","post_germline_calls"),
    threads: wf.get_resource("gcnv", "post_germline_calls", "threads")
    resources:
        time=wf.get_resource("gcnv", "post_germline_calls", "time"),
        mem=wf.get_resource("gcnv", "post_germline_calls", "memory"),
        partition=wf.get_resource("gcnv", "post_germline_calls", "partition"),
    log:
        wf.get_log_file("gcnv", "post_germline_calls"),
    wrapper:
        wf.wrapper_path("gcnv/post_germline_calls")


rule targeted_seq_cnv_calling_gcnv_merge_cohort_vcfs:
    input:
        wf.get_input_files("gcnv", "merge_cohort_vcfs"),
    output:
        **wf. get_output_files("gcnv","merge_cohort_vcfs"),
    threads: wf.get_resource("gcnv", "merge_cohort_vcfs", "threads")
    resources:
        time=wf.get_resource("gcnv", "merge_cohort_vcfs", "time"),
        mem=wf.get_resource("gcnv", "merge_cohort_vcfs", "memory"),
        partition=wf.get_resource("gcnv", "merge_cohort_vcfs", "partition"),
    log:
        wf.get_log_file("gcnv", "merge_cohort_vcfs"),
    wrapper:
        wf.wrapper_path("gcnv/merge_cohort_vcfs")


rule targeted_seq_cnv_calling_gcnv_extract_ped:
    input:
        unpack(wf.get_input_files("gcnv", "extract_ped")),
    output:
        **( wf. get_output_files("gcnv","extract_ped")),
    threads: wf.get_resource("gcnv", "extract_ped", "threads")
    resources:
        time=wf.get_resource("gcnv", "extract_ped", "time"),
        mem=wf.get_resource("gcnv", "extract_ped", "memory"),
        partition=wf.get_resource("gcnv", "extract_ped", "partition"),
    log:
        wf.get_log_file("gcnv", "extract_ped"),
    params:
        ped_members=wf.substep_getattr("gcnv", "get_ped_members"),
    wrapper:
        wf.wrapper_path("gcnv/extract_ped")
