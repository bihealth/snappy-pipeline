# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic neoepitope prediction step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_neoepitope_prediction import (
    SomaticNeoepitopePredictionWorkflow,
)

__author__ = "Pham Gia Cuong"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================
wf = SomaticNeoepitopePredictionWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_neoepitope_preparation_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# Generic linking out ---------------------------------------------------------


rule somatic_neoepitope_preparation_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


rule somatic_neoepitope_prediction_pvactools_install:
    output:
        **wf.get_output_files("pvacseq", "install"),
    params:
        container="docker://griffithlab/pvactools",
    resources:
        time=wf.get_resource("pvacseq", "install", "time"),
        memory=wf.get_resource("pvacseq", "install", "memory"),
        partition=wf.get_resource("pvacseq", "install", "partition"),
    log:
        **wf.get_log_file("pvacseq", "install"),
    wrapper:
        wf.wrapper_path("singularity")


rule somatic_neoepitope_preparation:
    input:
        unpack(wf.get_input_files("pvacseq", "prepare")),
    output:
        **wf.get_output_files("pvacseq", "prepare"),
    log:
        **wf.get_log_file("pvacseq", "prepare"),
    threads: wf.get_resource("pvacseq", "prepare", "threads")
    resources:
        time=wf.get_resource("pvacseq", "prepare", "time"),
        memory=wf.get_resource("pvacseq", "prepare", "memory"),
        partition=wf.get_resource("pvacseq", "prepare", "partition"),
        tmpdir=wf.get_resource("pvacseq", "prepare", "tmpdir"),
    params:
        **{"args": wf.get_params("pvacseq", "prepare")},
    wrapper:
        wf.wrapper_path("pvactools/combining")


rule somatic_neoepitope_prediction:
    input:
        unpack(wf.get_input_files("pvacseq", "predict")),
    output:
        **wf.get_output_files("pvacseq", "predict"),
    log:
        **wf.get_log_file("pvacseq", "predict"),
    threads: wf.get_resource("pvacseq", "predict", "threads")
    resources:
        time=wf.get_resource("pvacseq", "predict", "time"),
        memory=wf.get_resource("pvacseq", "predict", "memory"),
        partition=wf.get_resource("pvacseq", "predict", "partition"),
        tmpdir=wf.get_resource("pvacseq", "predict", "tmpdir"),
    params:
        **{"args": wf.get_params("pvacseq", "predict")},
    wrapper:
        wf.wrapper_path("pvactools/pvacseq")
