# XHMM needs many rules, thus they are in their own files.


rule sv_calling_targeted_xhmm_coverage:
    input:
        unpack(wf.get_input_files("xhmm", "coverage")),
    output:
        **wf.get_output_files("xhmm", "coverage"),
    threads: wf.get_resource("xhmm", "coverage", "threads")
    resources:
        time=wf.get_resource("xhmm", "coverage", "time"),
        memory=wf.get_resource("xhmm", "coverage", "memory"),
        partition=wf.get_resource("xhmm", "coverage", "partition"),
    params:
        args=wf.get_params("xhmm", "coverage"),
    log:
        wf.get_log_file("xhmm", "coverage"),
    wrapper:
        wf.wrapper_path("xhmm/gatk_cov")


rule sv_calling_targeted_xhmm_merge_cov:
    input:
        wf.get_input_files("xhmm", "merge_cov"),
    output:
        wf.get_output_files("xhmm", "merge_cov"),
    threads: wf.get_resource("xhmm", "merge_cov", "threads")
    resources:
        time=wf.get_resource("xhmm", "merge_cov", "time"),
        memory=wf.get_resource("xhmm", "merge_cov", "memory"),
        partition=wf.get_resource("xhmm", "merge_cov", "partition"),
    log:
        wf.get_log_file("xhmm", "merge_cov"),
    wrapper:
        wf.wrapper_path("xhmm/merge_cov")


rule sv_calling_targeted_xhmm_ref_stats:
    output:
        **wf.get_output_files("xhmm", "ref_stats"),
    threads: wf.get_resource("xhmm", "ref_stats", "threads")
    resources:
        time=wf.get_resource("xhmm", "ref_stats", "time"),
        memory=wf.get_resource("xhmm", "ref_stats", "memory"),
        partition=wf.get_resource("xhmm", "ref_stats", "partition"),
    log:
        wf.get_log_file("xhmm", "ref_stats"),
    wrapper:
        wf.wrapper_path("xhmm/gatk_ref_stats")


rule sv_calling_targeted_xhmm_filter_center:
    input:
        unpack(wf.get_input_files("xhmm", "filter_center")),
    output:
        **wf.get_output_files("xhmm", "filter_center"),
    threads: wf.get_resource("xhmm", "filter_center", "threads")
    resources:
        time=wf.get_resource("xhmm", "filter_center", "time"),
        memory=wf.get_resource("xhmm", "filter_center", "memory"),
        partition=wf.get_resource("xhmm", "filter_center", "partition"),
    log:
        wf.get_log_file("xhmm", "filter_center"),
    wrapper:
        wf.wrapper_path("xhmm/filter_center")


rule sv_calling_targeted_xhmm_pca:
    input:
        wf.get_input_files("xhmm", "pca"),
    output:
        **(wf.get_output_files("xhmm", "pca")),
    threads: wf.get_resource("xhmm", "pca", "threads")
    resources:
        time=wf.get_resource("xhmm", "pca", "time"),
        memory=wf.get_resource("xhmm", "pca", "memory"),
        partition=wf.get_resource("xhmm", "pca", "partition"),
    log:
        wf.get_log_file("xhmm", "pca"),
    wrapper:
        wf.wrapper_path("xhmm/pca")


rule sv_calling_targeted_xhmm_normalize:
    input:
        unpack(wf.get_input_files("xhmm", "normalize")),
    output:
        **(wf.get_output_files("xhmm", "normalize")),
    threads: wf.get_resource("xhmm", "normalize", "threads")
    resources:
        time=wf.get_resource("xhmm", "normalize", "time"),
        memory=wf.get_resource("xhmm", "normalize", "memory"),
        partition=wf.get_resource("xhmm", "normalize", "partition"),
    log:
        wf.get_log_file("xhmm", "normalize"),
    wrapper:
        wf.wrapper_path("xhmm/normalize")


rule sv_calling_targeted_xhmm_zscore_center:
    input:
        wf.get_input_files("xhmm", "zscore_center"),
    output:
        **(wf.get_output_files("xhmm", "zscore_center")),
    threads: wf.get_resource("xhmm", "zscore_center", "threads")
    resources:
        time=wf.get_resource("xhmm", "zscore_center", "time"),
        memory=wf.get_resource("xhmm", "zscore_center", "memory"),
        partition=wf.get_resource("xhmm", "zscore_center", "partition"),
    log:
        wf.get_log_file("xhmm", "zscore_center"),
    wrapper:
        wf.wrapper_path("xhmm/zscore_center")


rule sv_calling_targeted_xhmm_refilter:
    input:
        unpack(wf.get_input_files("xhmm", "refilter")),
    output:
        wf.get_output_files("xhmm", "refilter"),
    threads: wf.get_resource("xhmm", "refilter", "threads")
    resources:
        time=wf.get_resource("xhmm", "refilter", "time"),
        memory=wf.get_resource("xhmm", "refilter", "memory"),
        partition=wf.get_resource("xhmm", "refilter", "partition"),
    log:
        wf.get_log_file("xhmm", "refilter"),
    wrapper:
        wf.wrapper_path("xhmm/refilter")


rule sv_calling_targeted_xhmm_discover:
    input:
        unpack(wf.get_input_files("xhmm", "discover")),
    output:
        **(wf.get_output_files("xhmm", "discover")),
    threads: wf.get_resource("xhmm", "discover", "threads")
    resources:
        time=wf.get_resource("xhmm", "discover", "time"),
        memory=wf.get_resource("xhmm", "discover", "memory"),
        partition=wf.get_resource("xhmm", "discover", "partition"),
    log:
        wf.get_log_file("xhmm", "discover"),
    wrapper:
        wf.wrapper_path("xhmm/discover")


rule sv_calling_targeted_xhmm_genotype:
    input:
        unpack(wf.get_input_files("xhmm", "genotype")),
    output:
        **(wf.get_output_files("xhmm", "genotype")),
    threads: wf.get_resource("xhmm", "genotype", "threads")
    resources:
        time=wf.get_resource("xhmm", "genotype", "time"),
        memory=wf.get_resource("xhmm", "genotype", "memory"),
        partition=wf.get_resource("xhmm", "genotype", "partition"),
    log:
        wf.get_log_file("xhmm", "genotype"),
    wrapper:
        wf.wrapper_path("xhmm/genotype")


rule sv_calling_targeted_xhmm_extract_ped:
    input:
        unpack(wf.get_input_files("xhmm", "extract_ped")),
    output:
        **(wf.get_output_files("xhmm", "extract_ped")),
    threads: wf.get_resource("xhmm", "extract_ped", "threads")
    resources:
        time=wf.get_resource("xhmm", "extract_ped", "time"),
        memory=wf.get_resource("xhmm", "extract_ped", "memory"),
        partition=wf.get_resource("xhmm", "extract_ped", "partition"),
    log:
        wf.get_log_file("xhmm", "extract_ped"),
    params:
        ped_members=wf.substep_getattr("xhmm", "get_ped_members"),
    wrapper:
        wf.wrapper_path("xhmm/extract_ped")
