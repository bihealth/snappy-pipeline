import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.sv_calling_targeted import SvCallingTargetedWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SvCallingTargetedWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Writing out pedigrees can be done locally
    wgs_cnv_calling_write_pedigree_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Germline CNV Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule wgs_cnv_calling_write_pedigree_run:
    output:
        wf.get_output_files("write_pedigree", "run"),
    run:
        wf.substep_dispatch("write_pedigree", "run", wildcards, output)


# GATK-gCNV -------------------------------------------------------------------

rule sv_calling_targeted_gcnv_preprocess_intervals:
    input:
        unpack(wf.get_input_files("gcnv", "preprocess_intervals")),
    output:
        **wf.get_output_files("gcnv", "preprocess_intervals"),
    threads: wf.get_resource("gcnv", "preprocess_intervals", "threads")
    resources:
        time=wf.get_resource("gcnv", "preprocess_intervals", "time"),
        memory=wf.get_resource("gcnv", "preprocess_intervals", "memory"),
        partition=wf.get_resource("gcnv", "preprocess_intervals", "partition"),
    log:
        wf.get_log_file("gcnv", "preprocess_intervals"),
    wrapper:
        wf.wrapper_path("gcnv/preprocess_intervals")


rule sv_calling_targeted_gcnv_coverage:
    input:
        unpack(wf.get_input_files("gcnv", "coverage")),
    output:
        **wf.get_output_files("gcnv", "coverage"),
    threads: wf.get_resource("gcnv", "coverage", "threads")
    resources:
        time=wf.get_resource("gcnv", "coverage", "time"),
        memory=wf.get_resource("gcnv", "coverage", "memory"),
        partition=wf.get_resource("gcnv", "coverage", "partition"),
    log:
        wf.get_log_file("gcnv", "coverage"),
    wrapper:
        wf.wrapper_path("gcnv/coverage")


rule sv_calling_targeted_gcnv_contig_ploidy:
    input:
        unpack(wf.get_input_files("gcnv", "contig_ploidy")),
    output:
        **wf.get_output_files("gcnv", "contig_ploidy"),
    threads: wf.get_resource("gcnv", "contig_ploidy", "threads")
    resources:
        time=wf.get_resource("gcnv", "contig_ploidy", "time"),
        memory=wf.get_resource("gcnv", "contig_ploidy", "memory"),
        partition=wf.get_resource("gcnv", "contig_ploidy", "partition"),
    log:
        wf.get_log_file("gcnv", "contig_ploidy"),
    params:
        args=wf.get_params("gcnv", "contig_ploidy"),
    wrapper:
        wf.wrapper_path("gcnv/contig_ploidy_case_mode")


rule sv_calling_targeted_gcnv_call_cnvs:
    input:
        unpack(wf.get_input_files("gcnv", "call_cnvs")),
    output:
        **wf.get_output_files("gcnv", "call_cnvs"),
    threads: wf.get_resource("gcnv", "call_cnvs", "threads")
    resources:
        time=wf.get_resource("gcnv", "call_cnvs", "time"),
        memory=wf.get_resource("gcnv", "call_cnvs", "memory"),
        partition=wf.get_resource("gcnv", "call_cnvs", "partition"),
    log:
        wf.get_log_file("gcnv", "call_cnvs"),
    params:
        args=wf.get_params("gcnv", "call_cnvs"),
    wrapper:
        wf.wrapper_path("gcnv/call_cnvs_case_mode")


rule sv_calling_targeted_gcnv_post_germline_calls:
    input:
        unpack(wf.get_input_files("gcnv", "post_germline_calls")),
    output:
        **wf.get_output_files("gcnv", "post_germline_calls"),
    threads: wf.get_resource("gcnv", "post_germline_calls", "threads")
    resources:
        time=wf.get_resource("gcnv", "post_germline_calls", "time"),
        memory=wf.get_resource("gcnv", "post_germline_calls", "memory"),
        partition=wf.get_resource("gcnv", "post_germline_calls", "partition"),
    log:
        wf.get_log_file("gcnv", "post_germline_calls"),
    params:
        args=wf.get_params("gcnv", "post_germline_calls"),
    wrapper:
        wf.wrapper_path("gcnv/post_germline_calls_case_mode")


rule sv_calling_targeted_gcnv_joint_germline_cnv_segmentation:
    input:
        unpack(wf.get_input_files("gcnv", "joint_germline_cnv_segmentation")),
    output:
        **wf.get_output_files("gcnv", "joint_germline_cnv_segmentation"),
    threads: wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "threads")
    resources:
        time=wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "time"),
        memory=wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "memory"),
        partition=wf.get_resource("gcnv", "joint_germline_cnv_segmentation", "partition"),
    log:
        **wf.get_log_file("gcnv", "joint_germline_cnv_segmentation"),
    wrapper:
        wf.wrapper_path("gcnv/joint_germline_cnv_segmentation")


# Run Manta -------------------------------------------------------------------

rule wgs_sv_calling_manta_run:
    input:
        unpack(wf.get_input_files("manta", "run")),
    output:
        **wf.get_output_files("manta", "run"),
    threads: wf.get_resource("manta", "run", "threads")
    resources:
        time=wf.get_resource("manta", "run", "time"),
        memory=wf.get_resource("manta", "run", "memory"),
        partition=wf.get_resource("manta", "run", "partition"),
    log:
        **wf.get_log_file("manta", "run"),
    wrapper:
        wf.wrapper_path("manta/germline_targeted")


# Delly2 Steps ----------------------------------------------------------------

rule sv_calling_targeted_delly2_call:
    input:
        unpack(wf.get_input_files("delly2", "call")),
    output:
        **wf.get_output_files("delly2", "call"),
    threads: wf.get_resource("delly2", "call", "threads")
    resources:
        time=wf.get_resource("delly2", "call", "time"),
        memory=wf.get_resource("delly2", "call", "memory"),
        partition=wf.get_resource("delly2", "call", "partition"),
    log:
        **wf.get_log_file("delly2", "call"),
    wrapper:
        wf.wrapper_path("delly2/germline/call")


rule sv_calling_targeted_delly2_merge_calls:
    input:
        unpack(wf.get_input_files("delly2", "merge_calls")),
    output:
        **wf.get_output_files("delly2", "merge_calls"),
    threads: wf.get_resource("delly2", "merge_calls", "threads")
    resources:
        time=wf.get_resource("delly2", "merge_calls", "time"),
        memory=wf.get_resource("delly2", "merge_calls", "memory"),
        partition=wf.get_resource("delly2", "merge_calls", "partition"),
    log:
        **wf.get_log_file("delly2", "merge_calls"),
    wrapper:
        wf.wrapper_path("delly2/germline/merge_calls")


rule sv_calling_targeted_delly2_genotype:
    input:
        unpack(wf.get_input_files("delly2", "genotype")),
    output:
        **wf.get_output_files("delly2", "genotype"),
    threads: wf.get_resource("delly2", "genotype", "threads")
    resources:
        time=wf.get_resource("delly2", "genotype", "time"),
        memory=wf.get_resource("delly2", "genotype", "memory"),
        partition=wf.get_resource("delly2", "genotype", "partition"),
    log:
        **wf.get_log_file("delly2", "genotype"),
    wrapper:
        wf.wrapper_path("delly2/germline/genotype")


rule sv_calling_targeted_delly2_merge_genotypes:
    input:
        unpack(wf.get_input_files("delly2", "merge_genotypes")),
    output:
        **wf.get_output_files("delly2", "merge_genotypes"),
    threads: wf.get_resource("delly2", "merge_genotypes", "threads")
    resources:
        time=wf.get_resource("delly2", "merge_genotypes", "time"),
        memory=wf.get_resource("delly2", "merge_genotypes", "memory"),
        partition=wf.get_resource("delly2", "merge_genotypes", "partition"),
    log:
        **wf.get_log_file("delly2", "merge_genotypes"),
    wrapper:
        wf.wrapper_path("delly2/germline/merge_genotypes")


