# -*- coding: utf-8 -*-
"""CUBI Pipeline wgs_mei_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.wgs_mei_calling import WgsMeiCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = WgsMeiCallingWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    wgs_mei_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule wgs_mei_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run Melt --------------------------------------------------------------------


rule wgs_mei_calling_melt_preprocess:
    input:
        unpack(wf.get_input_files("melt", "preprocess")),
    output:
        **wf. get_output_files('melt','preprocess'),
    threads: wf.get_resource("melt", "preprocess", "threads")
    resources:
        time=wf.get_resource("melt", "preprocess", "time"),
        memory=wf.get_resource("melt", "make_bed", "memory"),
        partition=wf.get_resource("melt", "preprocess", "partition"),
    log:
        wf.get_log_file("melt", "preprocess"),
    wrapper:
        wf.wrapper_path("melt/preprocess")


rule wgs_mei_calling_melt_indiv_analysis:
    input:
        unpack(wf.get_input_files("melt", "indiv_analysis")),
    output:
        **wf. get_output_files('melt','indiv_analysis'),
    threads: wf.get_resource("melt", "indiv_analysis", "threads")
    resources:
        time=wf.get_resource("melt", "indiv_analysis", "time"),
        memory=wf.get_resource("melt", "indiv_analysis", "memory"),
        partition=wf.get_resource("melt", "indiv_analysis", "partition"),
    log:
        wf.get_log_file("melt", "indiv_analysis"),
    wrapper:
        wf.wrapper_path("melt/indiv_analysis")


rule wgs_mei_calling_melt_group_analysis:
    input:
        unpack(wf.get_input_files("melt", "group_analysis")),
    output:
        **wf. get_output_files('melt','group_analysis'),
    threads: wf.get_resource("melt", "group_analysis", "threads")
    resources:
        time=wf.get_resource("melt", "group_analysis", "time"),
        memory=wf.get_resource("melt", "group_analysis", "memory"),
        partition=wf.get_resource("melt", "group_analysis", "partition"),
    log:
        wf.get_log_file("melt", "group_analysis"),
    wrapper:
        wf.wrapper_path("melt/group_analysis")


rule wgs_mei_calling_melt_genotype:
    input:
        unpack(wf.get_input_files("melt", "genotype")),
    output:
        **wf. get_output_files('melt','genotype'),
    threads: wf.get_resource("melt", "genotype", "threads")
    resources:
        time=wf.get_resource("melt", "genotype", "time"),
        memory=wf.get_resource("melt", "genotype", "memory"),
        partition=wf.get_resource("melt", "genotype", "partition"),
    log:
        wf.get_log_file("melt", "genotype"),
    wrapper:
        wf.wrapper_path("melt/genotype")


rule wgs_mei_calling_melt_make_vcf:
    input:
        unpack(wf.get_input_files("melt", "make_vcf")),
    output:
        **wf. get_output_files('melt','make_vcf'),
    threads: wf.get_resource("melt", "make_vcf", "threads")
    resources:
        time=wf.get_resource("melt", "make_vcf", "time"),
        memory=wf.get_resource("melt", "make_vcf", "memory"),
        partition=wf.get_resource("melt", "make_vcf", "partition"),
    log:
        wf.get_log_file("melt", "make_vcf"),
    wrapper:
        wf.wrapper_path("melt/make_vcf")


rule wgs_mei_calling_melt_merge_vcf:
    input:
        unpack(wf.get_input_files("melt", "merge_vcf")),
    output:
        **wf. get_output_files('melt','merge_vcf'),
    threads: wf.get_resource("melt", "merge_vcf", "threads")
    resources:
        time=wf.get_resource("melt", "merge_vcf", "time"),
        memory=wf.get_resource("melt", "merge_vcf", "memory"),
        partition=wf.get_resource("melt", "merge_vcf", "partition"),
    log:
        wf.get_log_file("melt", "merge_vcf"),
    wrapper:
        wf.wrapper_path("melt/merge_vcf")


rule wgs_mei_calling_melt_pick_pedigree:
    input:
        unpack(wf.get_input_files("melt", "reorder_vcf")),
    output:
        **wf. get_output_files('melt','reorder_vcf'),
    threads: wf.get_resource("melt", "reorder_vcf", "threads")
    resources:
        time=wf.get_resource("melt", "reorder_vcf", "time"),
        memory=wf.get_resource("melt", "reorder_vcf", "memory"),
        partition=wf.get_resource("melt", "reorder_vcf", "partition"),
    log:
        wf.get_log_file("melt", "reorder_vcf"),
    params:
        ped_members=wf.substep_getattr("melt", "get_ped_members"),
    wrapper:
        wf.wrapper_path("melt/reorder_vcf")
