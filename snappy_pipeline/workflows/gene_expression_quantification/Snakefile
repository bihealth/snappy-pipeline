# -*- coding: utf-8 -*-
"""CUBI Pipeline gene_expression_quantification step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.gene_expression_quantification import (
    GeneExpressionQuantificationWorkflow,
)

__author__ = "Clemens Messerschmidt"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = GeneExpressionQuantificationWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    gene_expression_quantification_link_in_run,
    gene_expression_quantification_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Link in FASTQ files ---------------------------------------------------------


rule gene_expression_quantification_link_in_run:
    input:
        wf.get_input_files("link_in", "run"),
    output:
        wf.get_output_files("link_in", "run"),
    run:
        shell(wf.get_shell_cmd("link_in", "run", wildcards))


# Generic linking out ---------------------------------------------------------


rule gene_expression_quantification_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Gene Expression Strandedness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run RseQC infer_experiment.py ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule gene_expression_quantification_strandedness_run:
    input:
        unpack(wf.get_input_files("strandedness", "run")),
    output:
        **wf.get_output_files("strandedness", "run"),
    threads: wf.get_resource("strandedness", "run", "threads")
    resources:
        time=wf.get_resource("strandedness", "run", "time"),
        memory=wf.get_resource("strandedness", "run", "memory"),
        partition=wf.get_resource("strandedness", "run", "partition"),
        tmpdir=wf.get_resource("strandedness", "run", "tmpdir"),
    log:
        **wf.get_log_file("strandedness", "run"),
    wrapper:
        wf.wrapper_path("rseqc")


# Gene Expression QC ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule gene_expression_quantification_duplication_run:
    input:
        unpack(wf.get_input_files("duplication", "run")),
        decision=wf.get_strandedness_file("run"),
    output:
        **wf.get_output_files("duplication", "run"),
    threads: wf.get_resource("duplication", "run", "threads")
    resources:
        time=wf.get_resource("duplication", "run", "time"),
        memory=wf.get_resource("duplication", "run", "memory"),
        partition=wf.get_resource("duplication", "run", "partition"),
        tmpdir=wf.get_resource("duplication", "run", "tmpdir"),
    log:
        **wf.get_log_file("duplication", "run"),
    wrapper:
        wf.wrapper_path("rnaqc/duplication")


rule gene_expression_quantification_dupradar_run:
    input:
        unpack(wf.get_input_files("dupradar", "run")),
        decision=wf.get_strandedness_file("run"),
    output:
        **wf.get_output_files("dupradar", "run"),
    threads: wf.get_resource("dupradar", "run", "threads")
    resources:
        time=wf.get_resource("dupradar", "run", "time"),
        memory=wf.get_resource("dupradar", "run", "memory"),
        partition=wf.get_resource("dupradar", "run", "partition"),
        tmpdir=wf.get_resource("dupradar", "run", "tmpdir"),
    log:
        **wf.get_log_file("dupradar", "run"),
    wrapper:
        wf.wrapper_path("rnaqc/dupradar")


rule gene_expression_quantification_rnaseqc_run:
    input:
        unpack(wf.get_input_files("rnaseqc", "run")),
        decision=wf.get_strandedness_file("run"),
    output:
        **wf.get_output_files("rnaseqc", "run"),
    threads: wf.get_resource("rnaseqc", "run", "threads")
    resources:
        time=wf.get_resource("rnaseqc", "run", "time"),
        memory=wf.get_resource("rnaseqc", "run", "memory"),
        partition=wf.get_resource("rnaseqc", "run", "partition"),
        tmpdir=wf.get_resource("rnaseqc", "run", "tmpdir"),
    log:
        **wf.get_log_file("rnaseqc", "run"),
    wrapper:
        wf.wrapper_path("rnaqc/rnaseqc")


rule gene_expression_quantification_star_run:
    input:
        unpack(wf.get_input_files("stats", "run")),
        decision=wf.get_strandedness_file("run"),
    output:
        **wf.get_output_files("stats", "run"),
    threads: wf.get_resource("stats", "run", "threads")
    resources:
        time=wf.get_resource("stats", "run", "time"),
        memory=wf.get_resource("stats", "run", "memory"),
        partition=wf.get_resource("stats", "run", "partition"),
        tmpdir=wf.get_resource("stats", "run", "tmpdir"),
    log:
        **wf.get_log_file("stats", "run"),
    wrapper:
        wf.wrapper_path("rnaqc/stats")


# Gene Expression Quantification ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run FeatureCounts------------------------------------------------------------


rule gene_expression_quantification_featurecounts_run:
    input:
        unpack(wf.get_input_files("featurecounts", "run")),
        decision=wf.get_strandedness_file("run"),
    output:
        **wf.get_output_files("featurecounts", "run"),
    threads: wf.get_resource("featurecounts", "run", "threads")
    resources:
        time=wf.get_resource("featurecounts", "run", "time"),
        memory=wf.get_resource("featurecounts", "run", "memory"),
        partition=wf.get_resource("featurecounts", "run", "partition"),
        tmpdir=wf.get_resource("featurecounts", "run", "tmpdir"),
    log:
        **wf.get_log_file("featurecounts", "run"),
    wrapper:
        wf.wrapper_path("featurecounts")


# Gene Expression Quantification ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run Salmon-------------------------------------------------------------------


rule gene_expression_quantification_salmon_run:
    input:
        **wf.get_input_files("salmon", "run"),
    output:
        **wf.get_output_files("salmon", "run"),
    threads: wf.get_resource("salmon", "run", "threads")
    resources:
        time=wf.get_resource("salmon", "run", "time"),
        memory=wf.get_resource("salmon", "run", "memory"),
        partition=wf.get_resource("salmon", "run", "partition"),
        tmpdir=wf.get_resource("salmon", "run", "tmpdir"),
    log:
        **wf.get_log_file("salmon", "run"),
    params:
        args=wf.substep_dispatch("salmon", "get_args", "run"),
    wrapper:
        wf.wrapper_path("salmon")
