# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_purity_ploidy_estimate step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_purity_ploidy_estimate import (
    SomaticPurityPloidyEstimateWorkflow,
)

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticPurityPloidyEstimateWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_purity_ploidy_estimate_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule somatic_purity_ploidy_estimate_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic Purity and Ploidy Estimation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ASCAT and Supporting Steps --------------------------------------------------


# Get B-allele frequencies from bam - steps are the same for WES and WGS ------
rule somatic_purity_ploidy_estimate_ascat_build_baf:
    input:
        unpack(wf.get_input_files("ascat", "build_baf")),
    output:
        **wf.get_output_files("ascat", "build_baf"),
    params:
        **{"args": wf.get_args("ascat", "build_baf")},
    threads: wf.get_resource("ascat", "build_baf", "threads")
    resources:
        time=wf.get_resource("ascat", "build_baf", "time"),
        memory=wf.get_resource("ascat", "build_baf", "memory"),
        partition=wf.get_resource("ascat", "build_baf", "partition"),
        tmpdir=wf.get_resource("ascat", "build_baf", "tmpdir"),
    log:
        **wf.get_log_file("ascat", "build_baf"),
    wrapper:
        wf.wrapper_path("ascat/build_baf")


rule somatic_purity_ploidy_estimate_ascat_prepare_hts:
    input:
        unpack(wf.get_input_files("ascat", "prepare_hts")),
    output:
        **wf.get_output_files("ascat", "prepare_hts"),
    params:
        **{"args": wf.get_args("ascat", "prepare_hts")},
    threads: wf.get_resource("ascat", "prepare_hts", "threads")
    resources:
        time=wf.get_resource("ascat", "prepare_hts", "time"),
        memory=wf.get_resource("ascat", "prepare_hts", "memory"),
        partition=wf.get_resource("ascat", "prepare_hts", "partition"),
        tmpdir=wf.get_resource("ascat", "prepare_hts", "tmpdir"),
    log:
        **wf.get_log_file("ascat", "prepare_hts"),
    wrapper:
        wf.wrapper_path("ascat/prepareHTS")


# run ASCAT R package with prepared input files -------------------------------


rule somatic_purity_ploidy_estimate_ascat_run:
    input:
        unpack(wf.get_input_files("ascat", "run")),
    output:
        **wf.get_output_files("ascat", "run"),
    threads: wf.get_resource("ascat", "run", "threads")
    resources:
        time=wf.get_resource("ascat", "run", "time"),
        memory=wf.get_resource("ascat", "run", "memory"),
        partition=wf.get_resource("ascat", "run", "partition"),
        tmpdir=wf.get_resource("ascat", "run", "tmpdir"),
    log:
        **wf.get_log_file("ascat", "run"),
    wrapper:
        wf.wrapper_path("ascat/run_ascat")
