# -*- coding: utf-8 -*-
"""CUBI Pipeline wgs_sv_export_external step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.wgs_sv_export_external import WgsSvExportExternalWorkflow


# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = WgsSvExportExternalWorkflow(workflow, config, lookup_paths, config_paths, os.getcwd())

# Rules =======================================================================


localrules:
    # Linking external VCF files
    wgs_sv_export_external_link_in_run,
    # Linking files from work/ to output/ should be done locally
    wgs_sv_export_external_link_out_run,
    # Writing pedigrees should be done locally as well
    wgs_sv_export_external_write_pedigree_run,


rule wgs_sv_export_external_all:
    input:
        wf.get_result_files(),
    default_target: True


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule wgs_sv_export_external_link_in_run:
    input:
        wf.get_input_files("link_in_vcf_external", "run"),
    output:
        wf.get_output_files("link_in_vcf_external", "run"),
    run:
        shell(wf.get_shell_cmd("link_in_vcf_external", "run", wildcards))


rule wgs_sv_export_external_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Annotation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Write out pedigree file -----------------------------------------------------


rule wgs_sv_export_external_write_pedigree_run:
    output:
        wf.get_output_files("write_pedigree_with_sample_name", "run"),
    run:
        wf.substep_dispatch("write_pedigree_with_sample_name", "run", wildcards, output)


# Merge external VCFs by pedigree (if necessary) ------------------------------


rule wgs_sv_export_external_varfish_annotator_external_merge_vcf:
    input:
        unpack(wf.get_input_files("varfish_annotator_external", "merge_vcf")),
    output:
        **wf.get_output_files("varfish_annotator_external", "merge_vcf"),
    threads: wf.get_resource("varfish_annotator_external", "merge_vcf", "threads")
    resources:
        time=wf.get_resource("varfish_annotator_external", "merge_vcf", "time"),
        memory=wf.get_resource("varfish_annotator_external", "merge_vcf", "memory"),
        partition=wf.get_resource("varfish_annotator_external", "merge_vcf", "partition"),
        tmpdir=wf.get_resource("varfish_annotator_external", "merge_vcf", "tmpdir"),
    log:
        **wf.get_log_file("varfish_annotator_external", "merge_vcf"),
    params:
        **{"args": wf.get_params("varfish_annotator_external", "merge_vcf")},
    wrapper:
        wf.wrapper_path("bcftools/merge_vcf")


# Run varfish-annotator-cli annotate ------------------------------------------


rule wgs_sv_export_external_varfish_annotator_external_annotate_svs:
    input:
        unpack(wf.get_input_files("varfish_annotator_external", "annotate")),
    output:
        **wf.get_output_files("varfish_annotator_external", "annotate"),
    threads: wf.get_resource("varfish_annotator_external", "annotate", "threads")
    resources:
        time=wf.get_resource("varfish_annotator_external", "annotate", "time"),
        memory=wf.get_resource("varfish_annotator_external", "annotate", "memory"),
        partition=wf.get_resource("varfish_annotator_external", "annotate", "partition"),
        tmpdir=wf.get_resource("varfish_annotator_external", "annotate", "tmpdir"),
    log:
        **wf.get_log_file("varfish_annotator_external", "annotate"),
    params:
        **{"args": wf.get_params("varfish_annotator_external", "annotate")},
    wrapper:
        wf.wrapper_path("varfish_annotator/annotate_svs")
