[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"


[project]
name = "snappy-pipeline"
authors = [
    { name = "Manuel Holtgrewe", email = "manuel.holtgrewe@bih-charite.de" },
]
description = "SNAPPY Nucleic Acid Processing in Python (by CUBI)"
readme = "README.md"
requires-python = ">=3.12"
keywords = ["bioinformatics"]
license = { text = "MIT license" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]
dependencies = [
    "setuptools ~=68.1.2",
    # Nice, round-trip enabled YAML parsing
    "ruamel.yaml ~=0.18.6",
    # File-based locks
    "fasteners ~=0.17.3",
    # We're trying to keep the PyPi package up to date, you might have to install
    # from source, though.
    "biomedsheets @ git+https://github.com/bihealth/biomedsheets.git@4e0a8484850c39d1511036c3fe29ec0b4f9271f8",
    # Helpful for CLIs
    "termcolor ~=2.5.0",
    # Snakemake is used for providing the actual wrapper calling functionality
    "snakemake ~=7.32.0",
    # Required for plotting
    "matplotlib ~=3.8.4",
    # Library for working with VCF files.
    "vcfpy ~=0.13.8",
    # Support for vcfpy
    "pysam ~=0.22.1",
    "pytabix ~=0.1",
    # Jinja 2 template rendering
    "jinja2 ~=3.1.4",
    # Parsing of ISA-tab.
    "altamisa @ git+https://github.com/bihealth/altamisa.git@817dc491ff819e4c80686082bf3e5f602f1ac14c",
    # REST API client for VarFish Server
    "varfish-cli ~=0.6.3",
    # Validation for models, mainly used for configuration validation
    "pydantic ~=2.7.0"
]

[project.urls]
Repository = "https://github.com/bihealth/snappy-pipeline"
Documentation = "https://snappy-pipeline.readthedocs.io/en/latest/"
Issues = "https://github.com/bihealth/snappy-pipeline/issues"
Changelog = "https://github.com/bihealth/snappy-pipeline/blob/main/CHANGELOG.md"

[project.optional-dependencies]
test = [
    "pytest ~=8.2.2",
    "coverage ~=7.5.3",
    "pytest-cov ~=5.0.0",
    "pytest-mock ~=3.14.0",
    "pytest-subprocess ~=1.5.0",
    # Fake file system for testing
    "pyfakefs ~=5.5.0",
    "pytest-sugar ~=0.9.6",
    # coveralls.io tooling
    "coveralls ~=4.0.1",
]
dev = [
    # ruff code linter + formatter
    "ruff ~=0.4.8",
    # "snakefmt" code formatter and checker.
    "snakefmt ~=0.8.5",
    "pre-commit ~=3.7.1"
]
docs = [
    "sphinx ~=7.3.7",
    "sphinx_rtd_theme ~=2.0.0",
    "sphinx-mdinclude ~=0.6.0",
]
all = [
    "snappy-pipeline[test,docs,dev]"
]

[project.scripts]
snappy-pull-sheet = "snappy_pipeline.apps.snappy_pull_sheet:main"
snappy-snake = "snappy_pipeline.apps.snappy_snake:main"
snappy-start-project = "snappy_pipeline.apps.snappy_start_project:main"
snappy-start-step = "snappy_pipeline.apps.snappy_start_step:main"
snappy-refresh-step = "snappy_pipeline.apps.snappy_refresh_step:main"
snappy-slurm-status = "snappy_pipeline.apps.snappy_slurm_status:main"
# additional tools
snappy-bed_filter_jaccard = "snappy_wrappers.tools.bed_filter_jaccard:main"
snappy-fix_vcf = "snappy_wrappers.tools.fix_vcf:main"
snappy-genome_windows = "snappy_wrappers.tools.genome_windows:main"
snappy-quickvenn = "snappy_wrappers.tools.quickvenn:main"
snappy-vcf_first_header = "snappy_wrappers.tools.vcf_first_header:main"
snappy-vcf_filter_denovo = "snappy_wrappers.tools.vcf_filter_denovo:main"
snappy-vcf_filter_from_info = "snappy_wrappers.tools.vcf_filter_from_info:main"
snappy-vcf_filter_to_info = "snappy_wrappers.tools.vcf_filter_to_info:main"
snappy-ped_to_vcf_header = "snappy_wrappers.tools.ped_to_vcf_header:main"


[tool.setuptools]
packages = ["snappy_pipeline", "snappy_wrappers"]
# bash scripts
script-files = [
    "scripts/snappy-vcf_sort",
    "scripts/snappy-vcf_split"
]

[tool.setuptools.dynamic]
version = {attr = "snappy_pipeline.version.__version__"}


[tool.coverage.run]
omit = ["snappy_pipeline/_version.py", "snappy_wrappers/wrappers/*/wrapper.p"]
relative_files = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "def __repr__", "if __name__ == '__main__':"]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "docs",
    "tests",
    ".*.py",
    ".snakemake.*.wrapper.py",
    "splitMNPsAndComplex.py",
    "wrapper.py",
    "snappy_pipeline/__init__.py",
    ".tests",
]

line-length = 100
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "B9"]  # enable "B", "C" later
ignore = ["E203", "E266", "E501", "B904", "B905", "E713", "E721", "E741"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["E501"]
"snappy_wrappers/tools/gcnv_merge_vcfs.py" = ["E721"]
"docs/conf.py" = ["ALL"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.snakefmt]
line_length = 100
include = "\\.smk$|\\.rules$|^Snakefile"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=snappy_pipeline --cov-report=xml"
testpaths = [
    "tests",
]
norecursedirs = [
    "docs",
    "*.egg-info",
    ".git"
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
]
