from textwrap import dedent
import os


# We could probably use relative paths in the snappy-pipeline config.
# However, we render the config file using absolute paths here,
# ensuring any missing input file is generated by this snakemake workflow here.
rule render_cancer_wes_config:
    input:
        template="config/cancer_wes/config.yaml.jinja2",
        reference="resources/refs/subregion.fa",
        bwa_index="resources/refs/subregion.bwt",
        vep_cache="resources/cache/vep",
    output:
        config["pipeline-configuration"]["cancer_wes"]["config"],
    log:
        "logs/jinja/render_cancer_wes_config.log",
    params:
        reference=lambda wildcards, input: os.path.abspath(input.reference),
        bwa_index=lambda wildcards, input: os.path.splitext(os.path.abspath(input.bwa_index))[0],
        vep_cache=lambda wildcards, input: os.path.abspath(input.vep_cache),
    template_engine:
        "jinja2"


# Calls the actual snappy-pipeline instance by doing each step one-by-one in the respective step's folder
# The input files listed here are mostly hidden requirements of some steps/wrappers used in the pipeline made visible
# The output `expand(â€¦)` call isn't strictly necessary, as for this test we are only interested in one sample
# at the moment, but that may change in the future. Also is a bit more explicit about which tools are used.
rule cancer_wes_execute_pipeline:
    input:
        config=config["pipeline-configuration"]["cancer_wes"]["config"],
        reference="resources/refs/subregion.fa",
        reference_list="resources/refs/subregion.fa.genome",
        # required by the mutect2 wrapper
        reference_dict="resources/refs/subregion.dict",
        bwa_index="resources/refs/subregion.bwt",
        snakemake_profile="profile/snakemake/config.yaml",
    output:
        expand(
            "{dir}/{step_name}/output/{mapper}.{caller}.{annotator}.filtered.{sample}/out/{mapper}.{caller}.{annotator}.filtered.{sample}.vcf.gz",
            dir=[config["pipeline-configuration"]["cancer_wes"]["workdir"]],
            step_name=["somatic_variant_filtration"],
            sample=["case001subregion-T1-DNA1-WES1"],
            mapper=["bwa"],
            caller=["mutect2"],
            annotator=["vep"],
        ),
    params:
        steps=[
            "ngs_mapping",
            "somatic_variant_calling",
            "somatic_variant_annotation",
            "somatic_variant_filtration",
        ],
        profile_dir=lambda wildcards, input: os.path.abspath(
            os.path.dirname(input.snakemake_profile)
        ),
        work_dir=lambda w, input: config["pipeline-configuration"]["cancer_wes"]["workdir"],
    log:
        "logs/execute-pipeline/cancer_wes.log",
    conda:
        "../envs/snappy.yaml"
    shell:
        """
        unset SNAKEMAKE_PROFILE
        touch {log}
        for step in {params.steps}
        do
            pushd {params.work_dir}/${{step}} || exit
            snappy-snake --snappy-pipeline-use-profile {params.profile_dir} || exit
            popd
        done
        """


rule vembrane_table:
    input:
        vcf="{file}.vcf.gz",
    output:
        vcf="{file}.vcf.tsv",
    params:
        expression='CHROM, POS, ALT, REF, CSQ["IMPACT"], CSQ["SYMBOL"]',
        extra="--annotation-key CSQ --header 'CHROM, POS, ALT, REF, IMPACT, SYMBOL'",
    log:
        "logs/vembrane/{file}.log",
    wrapper:
        "v3.7.0/bio/vembrane/table"
